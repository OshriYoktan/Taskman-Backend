{"version":3,"sources":["services/http.service.js","services/utilService.js","services/boardService.js","store/actions/boardActions.js","cmps/AppHeader/AppHeader.jsx","cmps/CardPreview/CardPreview.jsx","cmps/LabelEditModal/LabelEditModal.jsx","cmps/LabelModal/LabelModal.jsx","cmps/MemberModal/MemberModal.jsx","cmps/CheckListModal/CheckListModal.jsx","cmps/DueDateModal/DueDateModal.jsx","cmps/TaskModal/TaskModal.jsx","assets/imgs/homepage.png","cmps/BoardMenu/BoardMenu.jsx","assets/imgs/taskman-loader.svg","pages/BoardDetails/BoardDetails.jsx","cmps/BoardPreview/BoardPreview.jsx","cmps/BoardList/BoardList.jsx","pages/TaskmanApp/TaskmanApp.jsx","App.js","reportWebVitals.js","store/reducers/boardReducer.js","store/index.js","index.js"],"names":["BASE_URL","axios","Axios","create","withCredentials","httpService","endpoint","data","ajax","a","method","console","log","url","params","res","dir","response","status","utilService","getRandomInt","min","max","Math","ceil","floor","random","makeId","length","txt","possible","i","charAt","filter","term","arr","toLocaleLowerCase","board","name","includes","phone","email","sort","b","debounce","func","timeout","wait","args","later","clearTimeout","setTimeout","KEY","query","getBoardById","deleteBoard","saveBoard","getEmptyBoard","title","members","cards","_id","tasks","activity","background","labels","getEmptyCard","updateCard","taskToUpdate","cardToUpdate","boardToUpdate","taskIdx","findIndex","t","splice","updateBoard","getCloudImages","cloudUrls","getEmptyTask","desc","createdAt","Date","now","dueDate","isWithAttachment","cover","checklists","doneAt","getActivities","gActivities","getUsers","gUsers","boards","member","type","card","id","cardIdx","loadBoards","filterBy","dispatch","boardService","updatedBoard","setCurrBoard","boardId","updateBackground","AppHeader","useDispatch","className","onClick","to","icon","faHome","faUserCircle","CardPreview","props","cardPreviewOp","useForm","register","handleSubmit","currBoard","useSelector","state","boardReducer","useState","setTasks","isAddTask","setIsAddTask","newTask","useEffect","labelsDescToggle","ev","bool","stopPropagation","setIsDescShown","addTask","push","newBoard","addActivity","handleOnDragEnd","result","destination","items","Array","from","source","index","reorderedItem","boardToSave","setCurrCard","onChange","cardTitle","defaultValue","placeholder","openCardModal","onDragEnd","droppableId","provided","droppableProps","ref","innerRef","map","task","idx","draggableId","setCurrTask","draggableProps","dragHandleProps","isDescShown","label","style","backgroundColor","color","faList","reduce","accTotal","checklist","list","acc","itemInList","isChecked","faClock","format","withTitle","size","round","onSubmit","faTimes","LabelEditModal","setLabelEditModal","faChevronLeft","setLabelModal","LabelModal","labelEditModal","maxWidth","visibility","addLabel","currTask","find","currLabel","editLabel","faPencilAlt","MemberModal","setMemberModal","addMemberToTask","chooseMember","currMember","faCheckCircle","CheckListModal","formState","errors","setChecklistModal","newChecklistToSend","range","addChecklist","autoComplete","DueDateModal","timeStemp","React","selectedDate","setSelectedDate","setDueDateModal","selectedDateStr","parse","addDueDate","utils","DateFnsUtils","disableToolbar","variant","margin","value","date","KeyboardButtonProps","TaskModal","taskModalOp","labelModal","memberModal","checklistModal","dueDateModal","isDesc","setIsDesc","currCard","fromNow","faAlignLeft","descValue","preventDefault","listIdx","width","item","checked","changeCheckBox","rengeToShow","toFixed","setRange","textDecoration","idxInList","input","Object","keys","str","onSubmitItemInList","faTag","faUser","addMember","BoardMenu","boardMenuOp","isAbout","setIsAbout","isBackground","setIsBackground","isFilter","setIsFilter","isLabels","setIsLabels","cloudImgs","setCloudImgs","isAddLabel","setIsAddLabel","setFilterBy","sendFilter","onSearchTask","searchTask","filterTasks","saveLabels","descs","colors","forEach","arrValues","values","arr1","arr2","val","closeMenu","setIsMenu","isMenu","changeBackground","decoding","loading","src","alt","removeIdx","onSearchLabel","required","faPalette","deleteLabel","addBoardLabel","addBoardLabelColor","BoardDetails","newCard","users","isAddCard","setIsAddCard","draggedCards","setDraggedCards","isInvite","setIsInvite","isCardModal","setIsCardModal","x","setX","cardModal","setCardModal","addMembersToBoard","setMembersToBoard","match","closeModal","addNewCard","newCardTitle","removeUserFromBoard","user","boardIdx","newActivity","unshift","loader","clientX","img","failCard","some","labelToRemove","memberToRemove","boardTitle","userToAdd","toLowerCase","faPlus","faBars","left","top","BoardPreview","backgroundImage","BoardList","boardListOp","isCreateBoard","setIsCreateBoard","addBoard","newBoardTitle","TaskmanApp","App","component","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad9e0444.chunk.js","sourcesContent":["import Axios from 'axios'\r\n// import { router } from '@/router'\r\n\r\nconst BASE_URL = process.env.NODE_ENV === 'production' ?\r\n    '/api/' :\r\n    '//localhost:3030/api/'\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n})\r\n\r\nexport const httpService = {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\nasync function ajax(endpoint, method = 'GET', data = null) {\r\n    console.log(`${BASE_URL}${endpoint}`);\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data,\r\n            params: (method === 'GET') ? data : null\r\n        })\r\n        return res.data\r\n    } catch (err) {\r\n        console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`)\r\n        console.dir(err)\r\n        if (err.response && err.response.status === 401) {\r\n            // Depends on routing startegy - hash or history\r\n            // window.location.assign('/#/login')\r\n            // window.location.assign('/login')\r\n            // router.push('/login')\r\n        }\r\n        throw err\r\n    }\r\n}","export const utilService = {\r\n  getRandomInt,\r\n  makeId,\r\n  filter,\r\n  sort,\r\n  debounce,\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n\r\nfunction makeId(length = 10) {\r\n  var txt = ''\r\n  var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\r\n  for (var i = 0; i < length; i++) {\r\n    txt += possible.charAt(Math.floor(Math.random() * possible.length))\r\n  }\r\n  return txt\r\n}\r\n\r\nfunction filter(term, arr) {\r\n  term = term.toLocaleLowerCase()\r\n  return arr.filter(board => {\r\n    return board.name.toLocaleLowerCase().includes(term) ||\r\n      board.phone.toLocaleLowerCase().includes(term) ||\r\n      board.email.toLocaleLowerCase().includes(term)\r\n  })\r\n}\r\n\r\nfunction sort(arr) {\r\n  return arr.sort((a, b) => {\r\n    if (a.name.toLocaleLowerCase() < b.name.toLocaleLowerCase()) {\r\n      return -1;\r\n    }\r\n    if (a.name.toLocaleLowerCase() > b.name.toLocaleLowerCase()) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  })\r\n}\r\n\r\nfunction debounce(func, wait = 1000) {\r\n  let timeout;\r\n  return function (...args) {\r\n    const later = () => {\r\n      clearTimeout(timeout);\r\n      func(...args);\r\n    };\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n  };\r\n}","import { httpService } from \"./http.service\"\r\nimport { utilService } from \"./utilService\"\r\n\r\nconst KEY = 'board/'\r\n\r\nexport default {\r\n    query,\r\n    getBoardById,\r\n    deleteBoard,\r\n    saveBoard,\r\n    getEmptyBoard,\r\n    getEmptyCard,\r\n    updateCard,\r\n    updateBoard,\r\n    getCloudImages,\r\n    getEmptyTask,\r\n    getActivities,\r\n    getUsers\r\n}\r\n\r\nconst cloudUrls = [\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621015877/taskman/jared-verdi-PNKwdJ8WetM-unsplash_aabpzg.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016569/taskman/zsofia-szalay-TbrzJbcacnQ-unsplash_bst628.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016567/taskman/the-nigmatic-lUnLaEWzcz8-unsplash_vcfxju.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016565/taskman/steve-johnson-274PPmlOjyQ-unsplash_twaarr.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016564/taskman/omer-salom-LoijtQXXNhs-unsplash_w6cs4h.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016564/taskman/jonny-gios-h_XcnLbDc_0-unsplash_lhi5si.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016564/taskman/inaki-del-olmo-IRCzpl2YYKE-unsplash_tpzeyw.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016564/taskman/joel-holland-TRhGEGdw-YY-unsplash_dqapzs.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016558/taskman/ian-schneider-TamMbr4okv4-unsplash_r85bnj.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016557/taskman/mohammad-alizade-CDu0x1Aiils-unsplash_jqizxr.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016556/taskman/mohammad-alizade-62t_kKa2YlA-unsplash_rbytvb.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016555/taskman/mohamed-rishfaan-ir_65wcK_DA-unsplash_qgfljs.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016554/taskman/ines-mills-TGs0tHMk4eg-unsplash_bkqpbf.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016551/taskman/erol-ahmed-aIYFR0vbADk-unsplash_g8hmym.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016551/taskman/duy-thanh-nguyen-ZeoSVUcWjfY-unsplash_z4qs2l.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016550/taskman/fransiskus-filbert-mangundap-C9hqYikX34w-unsplash_mqj9zi.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016548/taskman/arpad-spodni-KbKQY_LjmuE-unsplash_fqlcyv.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016546/taskman/dave-hoefler-PkQH-GHEp0A-unsplash_jfurlc.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016544/taskman/fabrice-villard-Du41jIaI5Ww-unsplash_kqcna2.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016542/taskman/estee-janssens-aQfhbxailCs-unsplash_slddqg.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016542/taskman/angel-luciano-XQJ0BBSvTs0-unsplash_d7advt.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016538/taskman/callum-wale-V8j3F6Ik9_s-unsplash_clbkte.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016537/taskman/braden-jarvis-prSogOoFmkw-unsplash_sgtmnd.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016534/taskman/danielle-macinnes-IuLgi9PWETU-unsplash_u9xmg7.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016533/taskman/carolyn-christine-D7bmnvGJA2Q-unsplash_oz27jz.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621018122/taskman/vlad-kutepov-WYJ9c7uSdnU-unsplash_c2g6gy.jpg',\r\n]\r\n\r\nconst gBoards = [\r\n    {\r\n        '_id': 'b101',\r\n        'title': 'First board',\r\n        'labels': [{ 'desc': 'Copy Request', 'color': '#61bd4f' }, { 'desc': 'One more step', 'color': '#f2d600' }, { 'desc': 'Design Team', 'color': '#ff9f1a' }, { 'desc': 'Product Marketing', 'color': '#eb5a46' }, { 'desc': 'Trello Tip', 'color': '#c377e0' }, { 'desc': 'Help', 'color': '#0079bf' }, { 'desc': 'Priority', 'color': '#51e898' }],\r\n        'members': [{ '_id': 'm101', 'name': 'Aviv Zohar' }, { '_id': 'm102', 'name': 'Hadar Marom' }, { '_id': 'm103', 'name': 'Oshri Yoktan' }],\r\n        'activity': [],\r\n        'background': '',\r\n        'cards': [\r\n            {\r\n                '_id': 'c101',\r\n                'title': 'Do this',\r\n                'tasks': [\r\n                    {\r\n                        '_id': 't101',\r\n                        'title': 'app',\r\n                        'desc': null,\r\n                        'createdAt': Date.now(),\r\n                        'labels': [],\r\n                        'dueDate': '',\r\n                        'activity': [],\r\n                        'members': [],\r\n                        'isWithAttachment': false,\r\n                        'cover': 'white',\r\n                        'checklists': [],\r\n                        'doneAt': null\r\n                    },\r\n                    {\r\n                        '_id': 't102',\r\n                        'title': 'css',\r\n                        'desc': null,\r\n                        'createdAt': Date.now(),\r\n                        'labels': [],\r\n                        'dueDate': '',\r\n                        'activity': [],\r\n                        'members': [],\r\n                        'isWithAttachment': false,\r\n                        'cover': 'white',\r\n                        'checklists': [],\r\n                        'doneAt': null\r\n                    },\r\n                    {\r\n                        '_id': 't103',\r\n                        'title': 'css',\r\n                        'desc': null,\r\n                        'createdAt': Date.now(),\r\n                        'labels': [],\r\n                        'dueDate': '',\r\n                        'activity': [],\r\n                        'members': [],\r\n                        'isWithAttachment': false,\r\n                        'cover': 'white',\r\n                        'checklists': [],\r\n                        'doneAt': null\r\n                    },\r\n                    {\r\n                        '_id': 't104',\r\n                        'title': 'css',\r\n                        'desc': null,\r\n                        'createdAt': Date.now(),\r\n                        'labels': [],\r\n                        'dueDate': '',\r\n                        'activity': [],\r\n                        'members': [],\r\n                        'isWithAttachment': false,\r\n                        'cover': 'white',\r\n                        'checklists': [],\r\n                        'doneAt': null\r\n                    },\r\n                    {\r\n                        '_id': 't105',\r\n                        'title': 'css',\r\n                        'desc': null,\r\n                        'createdAt': Date.now(),\r\n                        'labels': [],\r\n                        'dueDate': '',\r\n                        'activity': [],\r\n                        'members': [],\r\n                        'isWithAttachment': false,\r\n                        'cover': 'white',\r\n                        'checklists': [],\r\n                        'doneAt': null\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                '_id': 'c102',\r\n                'title': 'checklist',\r\n                'tasks': [\r\n                    {\r\n                        '_id': 't103',\r\n                        'title': 'learn react',\r\n                        'desc': null,\r\n                        'createdAt': Date.now(),\r\n                        'labels': [],\r\n                        'dueDate': '',\r\n                        'activity': [],\r\n                        'members': [],\r\n                        'isWithAttachment': false,\r\n                        'cover': 'white',\r\n                        'checklists': [],\r\n                        'doneAt': null\r\n                    },\r\n                    {\r\n                        '_id': 't104',\r\n                        'title': 'learn angular',\r\n                        'desc': null,\r\n                        'createdAt': Date.now(),\r\n                        'labels': [],\r\n                        'dueDate': '',\r\n                        'activity': [],\r\n                        'members': [],\r\n                        'isWithAttachment': false,\r\n                        'cover': 'white',\r\n                        'checklists': [],\r\n                        'doneAt': null\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                '_id': 'c103',\r\n                'title': 'done',\r\n                'tasks': [\r\n                    {\r\n                        '_id': 't105',\r\n                        'title': 'bootcamp',\r\n                        'desc': null,\r\n                        'createdAt': Date.now(),\r\n                        'labels': [],\r\n                        'dueDate': '',\r\n                        'activity': [],\r\n                        'members': [],\r\n                        'isWithAttachment': false,\r\n                        'cover': 'white',\r\n                        'checklists': [],\r\n                        'doneAt': null\r\n                    },\r\n                    {\r\n                        '_id': 't106',\r\n                        'title': 'school',\r\n                        'desc': null,\r\n                        'createdAt': Date.now(),\r\n                        'labels': [],\r\n                        'dueDate': '',\r\n                        'activity': [],\r\n                        'members': [],\r\n                        'isWithAttachment': false,\r\n                        'cover': 'white',\r\n                        'checklists': [],\r\n                        'doneAt': null\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                '_id': 'c104',\r\n                'title': 'AI',\r\n                'tasks': [\r\n                    {\r\n                        '_id': 't107',\r\n                        'title': 'app',\r\n                        'desc': null,\r\n                        'createdAt': Date.now(),\r\n                        'labels': [],\r\n                        'dueDate': '',\r\n                        'activity': [],\r\n                        'members': [],\r\n                        'isWithAttachment': false,\r\n                        'cover': 'white',\r\n                        'checklists': [],\r\n                        'doneAt': null\r\n                    },\r\n                    {\r\n                        '_id': 't108',\r\n                        'title': 'css',\r\n                        'desc': null,\r\n                        'createdAt': Date.now(),\r\n                        'labels': [],\r\n                        'dueDate': '',\r\n                        'activity': [],\r\n                        'members': [],\r\n                        'isWithAttachment': false,\r\n                        'cover': 'white',\r\n                        'checklists': [],\r\n                        'doneAt': null\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                '_id': 'c105',\r\n                'title': 'Chikchukim',\r\n                'tasks': [\r\n                    {\r\n                        '_id': 't109',\r\n                        'title': 'learn react',\r\n                        'desc': null,\r\n                        'createdAt': Date.now(),\r\n                        'labels': [],\r\n                        'dueDate': '',\r\n                        'activity': [],\r\n                        'members': [],\r\n                        'isWithAttachment': false,\r\n                        'cover': 'white',\r\n                        'checklists': [],\r\n                        'doneAt': null\r\n                    },\r\n                    {\r\n                        '_id': 't110',\r\n                        'title': 'learn angular',\r\n                        'desc': null,\r\n                        'createdAt': Date.now(),\r\n                        'labels': [],\r\n                        'dueDate': '',\r\n                        'activity': [],\r\n                        'members': [],\r\n                        'isWithAttachment': false,\r\n                        'cover': 'white',\r\n                        'checklists': [],\r\n                        'doneAt': null\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                '_id': 'c106',\r\n                'title': 'finalll',\r\n                'tasks': [\r\n                    {\r\n                        '_id': 't111',\r\n                        'title': 'bootcamp',\r\n                        'desc': null,\r\n                        'createdAt': Date.now(),\r\n                        'labels': [],\r\n                        'dueDate': '',\r\n                        'activity': [],\r\n                        'members': [],\r\n                        'isWithAttachment': false,\r\n                        'cover': 'white',\r\n                        'checklists': [],\r\n                        'doneAt': null\r\n                    },\r\n                    {\r\n                        '_id': 't112',\r\n                        'title': 'school',\r\n                        'desc': null,\r\n                        'createdAt': Date.now(),\r\n                        'labels': [],\r\n                        'dueDate': '',\r\n                        'activity': [],\r\n                        'members': [],\r\n                        'isWithAttachment': false,\r\n                        'cover': 'white',\r\n                        'checklists': [],\r\n                        'doneAt': null\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        '_id': 'b102',\r\n        'title': 'Second board',\r\n        'labels': [{ 'desc': 'Copy Request', 'color': '#61bd4f' }, { 'desc': 'One more step', 'color': '#f2d600' }, { 'desc': 'Design Team', 'color': '#ff9f1a' }, { 'desc': 'Product Marketing', 'color': '#eb5a46' }, { 'desc': 'Trello Tip', 'color': '#c377e0' }, { 'desc': 'Halp', 'color': '#0079bf' }, { 'desc': 'Priority', 'color': '#51e898' }],\r\n        'members': [],\r\n        'activity': [],\r\n        'backgroundColor': '',\r\n        'backgroundImg': '',\r\n        'cards': [\r\n            {\r\n                '_id': 'c107',\r\n                'title': 'To Fix',\r\n                'tasks': [\r\n                    {\r\n                        '_id': 't113',\r\n                        'title': 'app2',\r\n                        'desc': null,\r\n                        'createdAt': Date.now(),\r\n                        'labels': [],\r\n                        'dueDate': '',\r\n                        'activity': [],\r\n                        'members': [],\r\n                        'isWithAttachment': false,\r\n                        'cover': 'white',\r\n                        'checklists': [],\r\n                        'doneAt': null\r\n                    },\r\n                    {\r\n                        '_id': 't114',\r\n                        'title': 'jsx',\r\n                        'desc': null,\r\n                        'createdAt': Date.now(),\r\n                        'labels': [],\r\n                        'dueDate': '',\r\n                        'activity': [],\r\n                        'members': [],\r\n                        'isWithAttachment': false,\r\n                        'cover': 'white',\r\n                        'checklists': [],\r\n                        'doneAt': null\r\n                    },\r\n                ],\r\n            }\r\n        ],\r\n    },\r\n]\r\n\r\nconst gUsers = [\r\n    { _id: 'u101', name: 'Oshri Yoktan', boards: [5523] },\r\n    { _id: 'u102', name: 'Hadar Marom', boards: [5522] },\r\n    { _id: 'u103', name: 'Aviv Zohar', boards: [5523] },\r\n]\r\n\r\nconst gActivities = [\r\n    { _id: 'a101', member: 'Oshri Yoktan', type: 'added', desc: 'task', card: 'Do this', createdAt: Date.now() },\r\n    { _id: 'a102', member: 'Hadar Marom', type: 'removed', desc: 'task', card: 'Checklist', createdAt: Date.now() },\r\n    { _id: 'a103', member: 'Aviv Zohar', type: 'updated', desc: 'task', card: 'Done', createdAt: Date.now() },\r\n]\r\n\r\n// CRUDL\r\n// saveBoard(gBoards[0])\r\nasync function query() {\r\n    try {\r\n        return await httpService.get(KEY)\r\n    } catch (err) {\r\n        console.log('err:', err)\r\n    }\r\n}\r\n\r\nasync function getBoardById(id) {\r\n    try {\r\n        return await httpService.get(KEY + id)\r\n    } catch (err) {\r\n        console.log('err:', err)\r\n    }\r\n}\r\n\r\nasync function deleteBoard(id) {\r\n    try {\r\n        return await httpService.delete(KEY + id)\r\n    } catch (err) {\r\n        console.log('Error from boardService - ', err);\r\n    }\r\n}\r\n\r\nasync function saveBoard(board) {\r\n    try {\r\n        if (board._id || board._id === 0) return await httpService.put(KEY + board._id, board)\r\n        return await httpService.post(KEY, board)\r\n    } catch (err) {\r\n        console.log('err:', err)\r\n    }\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nfunction updateCard(taskToUpdate, cardToUpdate, boardToUpdate) {\r\n    // if you want to delete a task use the func and send the idx ----updateBoard(idx)----\r\n    if (typeof (taskToUpdate) !== 'number') {\r\n        const taskIdx = cardToUpdate.tasks.findIndex(t => t._id === taskToUpdate._id)\r\n        cardToUpdate.tasks.splice(taskIdx, 1, taskToUpdate)\r\n    } else {\r\n        cardToUpdate.tasks.splice(taskToUpdate, 1)\r\n    }\r\n    return updateBoard(cardToUpdate, boardToUpdate)\r\n}\r\n\r\nfunction updateBoard(cardToUpdate, boardToUpdate) {\r\n    if (typeof (cardToUpdate) !== 'number') {\r\n        const cardIdx = boardToUpdate.cards.findIndex(card => card._id === cardToUpdate._id)\r\n        boardToUpdate.cards.splice(cardIdx, 1, cardToUpdate)\r\n    } else {\r\n        boardToUpdate.cards.splice(cardToUpdate, 1)\r\n    }\r\n    const updatedBoard = { ...boardToUpdate, cards: [...boardToUpdate.cards] }\r\n    return updatedBoard;\r\n}\r\n\r\n// get functions /////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nfunction getCloudImages() {\r\n    return cloudUrls;\r\n}\r\n\r\nfunction getEmptyBoard() {\r\n    return {\r\n        title: '',\r\n        members: [],\r\n        cards: [{ _id: utilService.makeId(), title: 'Your first card!', tasks: [] }],\r\n        activity: [],\r\n        background: [],\r\n        labels: [],\r\n    }\r\n}\r\n\r\nfunction getEmptyCard() {\r\n    return {\r\n        _id: utilService.makeId(),\r\n        title: '',\r\n        tasks: []\r\n    }\r\n}\r\n\r\nfunction getEmptyTask() {\r\n    return {\r\n        _id: utilService.makeId(),\r\n        title: '',\r\n        desc: null,\r\n        createdAt: Date.now(),\r\n        labels: [],\r\n        dueDate: '',\r\n        activity: [],\r\n        members: [],\r\n        isWithAttachment: false,\r\n        cover: 'white',\r\n        checklists: [],\r\n        doneAt: null\r\n    }\r\n}\r\n\r\nfunction getUsers() {\r\n    return gUsers;\r\n}\r\n\r\nfunction getActivities() {\r\n    return gActivities;\r\n}\r\n\r\n// comment /////////////////////////////////\r\n\r\n// async function uploadImg(ev) {\r\n//     // cloudinary.uploader.upload(\"sample.jpg\", { \"crop\": \"limit\", \"tags\": \"samples\", \"width\": 3000, \"height\": 2000 }, function (result) { console.log(result) });\r\n//     // cloudinary.image(\"sample\", {\"crop\":\"fill\",\"gravity\":\"faces\",\"width\":300,\"height\":200,\"format\":\"jpg\"});\r\n//     const UPLOAD_PRESET = '' // Insert yours\r\n//     const CLOUD_NAME = '' // Insert yours\r\n//     const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`\r\n//     const FORM_DATA = new FormData();\r\n//     // Building the request body\r\n//     FORM_DATA.append('file', ev.target.files[0])\r\n//     FORM_DATA.append('upload_preset', UPLOAD_PRESET)\r\n//     // Sending a post method request to Cloudniarys' API\r\n//     try {\r\n//         const res = await axios.post(UPLOAD_URL, FORM_DATA)\r\n//         return res.data;\r\n//     } catch (err) {\r\n//         console.error('ERROR!', err)\r\n//     }\r\n// }","import boardService from '../../services/boardService'\r\n\r\nexport function loadBoards(filterBy) {\r\n  return async dispatch => {\r\n    const boards = await boardService.query(filterBy)\r\n    console.log('boards:', boards)\r\n    const action = { type: 'SET_BOARDS', boards }\r\n    dispatch(action)\r\n  }\r\n}\r\nexport function getBoardById(boardId) {\r\n  return async dispatch => {\r\n    const board = await boardService.getBoardById(boardId)\r\n    await dispatch({ type: 'SET_BOARD', board })\r\n    return board\r\n  }\r\n}\r\nexport function saveBoard(board) {\r\n  return async dispatch => {\r\n    const updatedBoard = await boardService.saveBoard(board)\r\n    if (!board._id) return dispatch({ type: 'ADD_BOARD', board: updatedBoard })\r\n    else return dispatch({ type: 'UPDATE_BOARD', updatedBoard })\r\n  }\r\n}\r\nexport function setCurrBoard(boardId) {\r\n  return async dispatch => {\r\n    const board = await boardService.getBoardById(boardId)\r\n    dispatch({ type: 'SET_BOARD', board })\r\n  }\r\n}\r\nexport function removeBoard(boardId) {\r\n  return async dispatch => {\r\n    await boardService.remove(boardId)\r\n    dispatch({ type: 'REMOVE_BOARD', boardId })\r\n  }\r\n}\r\nexport function updateBackground(background) {\r\n  return async dispatch => {\r\n    dispatch({ type: 'UPDATE_BACKGROUND', background })\r\n  }\r\n}\r\nexport function updateFilterBy(filterBy) {\r\n  return async dispatch => {\r\n    dispatch({ type: 'UPDATE_FILTERBY', filterBy })\r\n  }\r\n}","import { Link } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHome, faUserCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport './AppHeader.scss'\r\nimport { useDispatch } from 'react-redux'\r\nimport { updateBackground } from '../../store/actions/boardActions'\r\n\r\nexport function AppHeader() {\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <nav className=\"app-header sub-container\">\r\n            <Link className=\"link\" onClick={() => dispatch(updateBackground(true))} to=\"/\"><FontAwesomeIcon icon={faHome} /></Link>\r\n            <Link className=\"link\" onClick={() => dispatch(updateBackground(true))} to=\"/\">Taskman</Link>\r\n            <Link className=\"link\" onClick={() => dispatch(updateBackground(true))} to=\"/\"><FontAwesomeIcon icon={faUserCircle} /></Link>\r\n        </nav>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { saveBoard, setCurrBoard } from '../../store/actions/boardActions';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport boardService from '../../services/boardService';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHome, faCheckSquare, faList, faTimes, faClock } from '@fortawesome/free-solid-svg-icons'\r\nimport './CardPreview.scss'\r\nimport Avatar from 'react-avatar';\r\nimport Moment from 'react-moment';\r\n\r\n\r\nexport function CardPreview(props) {\r\n    const { card, cardPreviewOp } = props\r\n    const dispatch = useDispatch()\r\n    const { register, handleSubmit } = useForm();\r\n    const currBoard = useSelector(state => state.boardReducer.currBoard)\r\n    const [tasks, setTasks] = useState(card.tasks)\r\n    const [isAddTask, setIsAddTask] = useState(null)\r\n    var newTask = boardService.getEmptyTask()\r\n\r\n    const setCardTitle = data => {\r\n        card.title = data.cardTitle\r\n        const boardToUpdate = boardService.updateBoard(card, currBoard)\r\n        dispatch(saveBoard(boardToUpdate))\r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log('currBoard', currBoard);\r\n    })\r\n    //Hadar's-----------------------DONT DELETE YA ZONOT\r\n\r\n    // tasks:\r\n    // activity: []\r\n    // checklists: (2) [{…}, {…}]    {title: \"a\", list: Array(1), range: 0}  {desc: \"as\", isChecked: false}\r\n    // cover: \"white\"\r\n    // createdAt: 1620731453432\r\n    // desc: \"\"\r\n    // doneAt: null\r\n    // isDone: false\r\n    // isWithAttachment: false\r\n    // labels: (4) [{…}, {…}, {…}, {…}]\r\n    // members: (3) [{…}, {…}, {…}]   {_id: \"m101\", name: \"Aviv Zohar\"}\r\n    // title: \"app\"\r\n\r\n    const labelsDescToggle = (ev, bool) => {\r\n        ev.stopPropagation()\r\n        props.setIsDescShown(bool)\r\n        dispatch(setCurrBoard(currBoard._id))\r\n    }\r\n    const addTask = async data => {\r\n        newTask.title = data.newTask\r\n        tasks.push(newTask)\r\n        setTasks(tasks)\r\n        const newBoard = boardService.updateCard(newTask, card, currBoard)\r\n        dispatch(saveBoard(newBoard))\r\n        dispatch(setCurrBoard(currBoard._id))\r\n        newTask = boardService.getEmptyTask()\r\n        setIsAddTask(!isAddTask)\r\n        data.newTask = ''\r\n        cardPreviewOp.addActivity('Aviv Zohar', 'added', 'task', card.title)\r\n    }\r\n\r\n    const handleOnDragEnd = async (result) => {\r\n        if (!result.destination) return;\r\n        const items = Array.from(tasks);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n        card.tasks = items\r\n        setTasks(card.tasks);\r\n        const boardToSave = await boardService.updateBoard(card, currBoard)\r\n        dispatch(saveBoard(boardToSave))\r\n        dispatch(setCurrBoard(currBoard._id))\r\n    }\r\n    return (\r\n        <div className=\"board-card\" onClick={() => cardPreviewOp.setCurrCard(card)} >\r\n            <div className=\"hide-overflow\">\r\n                <div className=\"title\">\r\n                    <form onChange={handleSubmit(setCardTitle)}>\r\n                        <input type=\"text\" {...register(\"cardTitle\")} defaultValue={card.title} placeholder=\"Card name\" />\r\n                    </form>\r\n                    <div onClick={(ev) => cardPreviewOp.openCardModal(ev, card)} className=\"manage-card\"><p>⋮</p></div>\r\n                </div>\r\n                <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                    <Droppable droppableId=\"tasks\">\r\n                        {(provided) => (\r\n                            <ul {...provided.droppableProps} ref={provided.innerRef} className=\"tasks-container\">\r\n                                {tasks.map((task, idx) => {\r\n                                    return (\r\n                                        <Draggable key={task._id} draggableId={task._id} index={idx}>\r\n                                            {(provided) => (\r\n                                                <li onClick={() => cardPreviewOp.setCurrTask(task)} key={task._id} {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef} className=\"card-task\">\r\n                                                    <div className=\"label-color-to-preview-container\">\r\n                                                        {!props.isDescShown && task.labels.map((label, idx) => <label key={idx} className=\"label-color-to-preview\" style={{ backgroundColor: `${label.color}` }} onClick={(ev) => labelsDescToggle(ev, true)}></label>)}\r\n                                                        {props.isDescShown && task.labels.map((label, idx) => <label key={idx} className=\"label-color-open-to-preview\" style={{ backgroundColor: `${label.color}`}} onClick={(ev) => labelsDescToggle(ev, false)}>{label.desc}</label>)}\r\n                                                    </div>\r\n                                                    <span>{task.title}</span>\r\n                                                    <section className=\"buttom-preview-info\">\r\n                                                        {!task.checklists.length ? null :\r\n                                                            <p><FontAwesomeIcon icon={faList} />\r\n                                                                {task.checklists.reduce((accTotal, checklist) => {\r\n                                                                    return accTotal + checklist.list.reduce((acc, itemInList) => itemInList.isChecked + acc, 0)\r\n                                                                }, 0)}/\r\n                                                        {task.checklists.reduce((acc, checklist) => checklist.list.length + acc, 0)}\r\n                                                            </p>}\r\n                                                        {!task.dueDate ? null : <div className=\"due-date-to-preview\"><FontAwesomeIcon icon={faClock} /><Moment className=\"due-date-to-preview\" format=\"MMM D\" withTitle>{task.dueDate}</Moment></div>}\r\n                                                        {!task.members.length ? null :\r\n                                                            <div>\r\n                                                                {task.members.map((member, idx) => <Avatar key={idx} name={member.name} size=\"30\" round={true} />)}\r\n                                                            </div>}\r\n                                                    </section>\r\n                                                </li>\r\n                                            )\r\n                                            }</Draggable>)\r\n                                })}{provided.placeholder}\r\n                            </ul>)}\r\n                    </Droppable>\r\n                </DragDropContext>\r\n                {!isAddTask && <button className=\"add-task-btn\" onClick={() => setIsAddTask(!isAddTask)}> + Add a task:</button>}\r\n                {isAddTask && <div className=\"add-card-container\"><form onSubmit={handleSubmit(addTask)}>\r\n                    <textarea type=\"text\" id=\"title\" name=\"title\" {...register(\"newTask\")} placeholder=\"Task name\" defaultValue={newTask.title} />\r\n                    <button>Add Task</button>\r\n                </form>\r\n                    <p onClick={() => setIsAddTask(!isAddTask)}><FontAwesomeIcon className=\"fa\" icon={faTimes} /></p>\r\n                </div>\r\n                }\r\n            </div>\r\n        </div >\r\n\r\n    )\r\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faChevronLeft, faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport './LabelEditModal.scss'\r\n\r\n export function LabelEditModal (props) {\r\n\r\n        return (\r\n            <div className=\"label-edit-modal\">\r\n                <div className=\"labels-edit-modal-header\">\r\n                    <button onClick={()=>props.setLabelEditModal(false)}><FontAwesomeIcon icon={faChevronLeft} /></button>\r\n                    <h3>Labels</h3>\r\n                    <p className=\"btn-close-icon\" onClick={()=>props.setLabelModal(false)}><FontAwesomeIcon className=\"fa\" icon={faTimes} /></p>\r\n                </div>\r\n                <h1>edit that madafaka label</h1>\r\n            </div>\r\n        )\r\n}\r\n","\r\n\r\nimport { useEffect, useState } from 'react'\r\nimport boardService from '../../services/boardService'\r\nimport { LabelEditModal } from '../LabelEditModal/LabelEditModal'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimes, faPencilAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport './LabelModal.scss'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport function LabelModal(props) {\r\n    const [labelEditModal, setLabelEditModal] = useState(null)\r\n    const currBoard = useSelector(state => state.boardReducer.currBoard)\r\n    const labels = currBoard.labels\r\n\r\n    const func = (ev) => {\r\n        console.log('ev.pageX:', ev.pageX)\r\n        console.log('ev.pageX:', ev.pageY)\r\n        console.log('props:', props.addLabel)\r\n    }\r\n\r\n    const chooseLabel = (color) => {\r\n        props.addLabel(color)\r\n    }\r\n\r\n    const editLabel = (ev, label) => {\r\n        ev.stopPropagation()\r\n        setLabelEditModal(label)\r\n    }\r\n    useEffect(() => {\r\n        // console.log('props.currTask:', props.currTask.labels)\r\n    })\r\n    // const isHasV = (currLabel) => {\r\n    //     // console.log('currLabel:', currLabel)\r\n    //     const a= props.currTask.labels.some((label) => {\r\n    //         // console.log('label.color:', label.color)\r\n    //         // console.log(' currLabel.color:',  currLabel.color)\r\n    //         // console.log('label.color === currLabel.color:', label.color === currLabel.color)\r\n    //         return label.color === currLabel.color\r\n    //     })\r\n    //     console.log('a',a);\r\n    //     return <h1>v</h1>\r\n    // }\r\n    return (\r\n        <section >\r\n            {/* <div className=\"label-modal\" style={`top:${pageY}px}`}> */}\r\n            {/* <button onClick={func}>click</button> */}\r\n            {  <div className=\"label-modal\" style={!labelEditModal ? { maxWidth: 100 + '%' } : { maxWidth: 0, visibility: 'visible' }}>\r\n                <div className=\"labels-modal-header\">\r\n                    <h3>Labels</h3>\r\n                    <p className=\"btn-close-icon\" onClick={() => props.setLabelModal(false)}><FontAwesomeIcon className=\"fa\" icon={faTimes} /></p>\r\n                </div>\r\n                <ul className=\"label-container\">\r\n                    {labels.map((label, idx) => {\r\n                        return <li onClick={() => chooseLabel(label)} key={idx}  >\r\n                            <div className=\"label-to-show\" style={{ backgroundColor: `${label.color}` }}>\r\n                                <span>{label.desc}</span>\r\n                                <span>{(props.currTask.labels.find((currLabel) => currLabel.color === label.color) ? 'v' : null)}</span>\r\n                            </div>\r\n                            <button className=\"edit-label-btn\" onClick={(ev) => editLabel(ev, label)}><FontAwesomeIcon icon={faPencilAlt} /></button>\r\n                        </li>\r\n                    })}\r\n                </ul>\r\n            </div>}\r\n            { labelEditModal && <LabelEditModal setLabelModal={props.setLabelModal} setLabelEditModal={setLabelEditModal} addLabel={props.addLabel}></LabelEditModal>}\r\n        </section >\r\n    )\r\n}\r\n\r\n","\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimes, faPencilAlt, faCheckCircle } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport './MemberModal.scss'\r\nimport { useSelector } from 'react-redux'\r\nimport Avatar from 'react-avatar'\r\n\r\nexport function MemberModal(props) {\r\n    const chooseMember = (member) => {\r\n        props.addMemberToTask(member)\r\n    }\r\n    var currBoard = useSelector(state => state.boardReducer.currBoard)\r\n    return (\r\n        <div className=\"member-modal\" style={true ? { maxWidth: 100 + '%' } : { maxWidth: 0, visibility: 'visible' }}>\r\n            <div className=\"member-modal-header\">\r\n                <h3>Members</h3>\r\n                <p className=\"btn-close-icon\" onClick={() => props.setMemberModal(false)}><FontAwesomeIcon className=\"fa\" icon={faTimes} /></p>\r\n\r\n            </div>\r\n            <ul className=\"member-container\">\r\n                {currBoard.members.map((member, idx) => {\r\n                    return <li onClick={() => chooseMember(member)} key={idx}  >\r\n                        <div className=\"member-details\">\r\n                        <Avatar key={idx} name={member.name} size=\"30\" round={true} />\r\n                        <span >{member.name}</span>\r\n                        </div>\r\n                        <span >{(props.currTask.members.find((currMember) => currMember._id === member._id) ? <FontAwesomeIcon icon={faCheckCircle}> </FontAwesomeIcon> : null)}</span>\r\n                    </li>\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n","\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport './CheckListModal.scss'\r\n\r\nexport function CheckListModal(props) {\r\n    const { register, handleSubmit, formState: { errors } } = useForm();\r\n    const setTitle = data => {\r\n        const newChecklistToSend = { title: data.title, list: [], range: 0 }\r\n        props.addChecklist(newChecklistToSend)\r\n        props.setChecklistModal(false)\r\n    }\r\n    return (\r\n        <div className=\"checklist-modal\" >\r\n            <section className=\"checklist-modal-header\">\r\n                <h3>Add Checklist</h3>\r\n                <p className=\"btn-close-icon\" onClick={() => props.setChecklistModal(false)}><FontAwesomeIcon className=\"fa\" icon={faTimes} /></p>\r\n            </section>\r\n            <form className=\"checklist-modal-main\" onSubmit={handleSubmit(setTitle)}>\r\n                <label>Title</label>\r\n                <input type=\"text\" autoComplete=\"off\" id=\"title\" name=\"title\"  {...register(\"title\")} defaultValue='' />\r\n                <button>Add</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import './DueDateModal.scss'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport 'date-fns';\r\nimport React from 'react';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\nexport function DueDateModal(props) {\r\n    const timeStemp = Date.now() + 604800000 //the default is next week\r\n    const defaultNextWeek = new Date(Date.now() + 604800000);\r\n    const [selectedDate, setSelectedDate] = React.useState(timeStemp);\r\n\r\n    const submit = () => {\r\n        var selectedDateStr = Date.parse(selectedDate)\r\n        props.addDueDate(selectedDateStr)\r\n        props.setDueDateModal(false)\r\n    }\r\n\r\n    return (\r\n        <div className=\"due-date-modal\">\r\n            <section className=\"due-date-modal-header\">\r\n                <h3>Due Date</h3>\r\n                <p className=\"btn-close-icon\" onClick={() => props.setDueDateModal(false)}><FontAwesomeIcon className=\"fa\" icon={faTimes} /></p>\r\n            </section>\r\n            <form onSubmit={submit}>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                    <KeyboardDatePicker\r\n                        disableToolbar\r\n                        variant=\"inline\"\r\n                        format=\"dd/MM/yyyy\"\r\n                        margin=\"normal\"\r\n                        id=\"date-picker-inline\"\r\n                        label=\"Pick A Deadline\"\r\n                        value={selectedDate}\r\n                        onChange={(date) => setSelectedDate(date)}\r\n                        KeyboardButtonProps={{ 'aria-label': 'change date', }}\r\n                    ></KeyboardDatePicker>\r\n                </MuiPickersUtilsProvider>\r\n                <button >save</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faAlignLeft, faClock, faList, faTag, faTimes, faUser } from '@fortawesome/free-solid-svg-icons'\r\nimport boardService from '../../services/boardService.js'\r\nimport './TaskModal.scss'\r\nimport Avatar from 'react-avatar';\r\nimport { LabelModal } from '../LabelModal/LabelModal';\r\nimport { MemberModal } from '../MemberModal/MemberModal';\r\nimport { CheckListModal } from '../CheckListModal/CheckListModal';\r\nimport { saveBoard, setCurrBoard } from '../../store/actions/boardActions';\r\nimport { DueDateModal } from '../DueDateModal/DueDateModal.jsx';\r\nimport Moment from 'react-moment';\r\n\r\nexport function TaskModal(props) {\r\n    const { taskModalOp } = props\r\n    const { currTask } = taskModalOp\r\n    const dispatch = useDispatch()\r\n    const { register, handleSubmit } = useForm();\r\n    const [labelModal, setLabelModal] = useState(false)\r\n    const [memberModal, setMemberModal] = useState(false)\r\n    const [checklistModal, setChecklistModal] = useState(false)\r\n    const [dueDateModal, setDueDateModal] = useState(false)\r\n    const [isDesc, setIsDesc] = useState(false)\r\n\r\n    var descValue;\r\n    var currBoard = useSelector(state => state.boardReducer.currBoard)\r\n\r\n    const currCard = currBoard.cards.find(card => {\r\n        return card.tasks.find(t => {\r\n            return t._id === currTask._id\r\n        })\r\n    })\r\n\r\n    const onSubmit = data => {\r\n        currTask.desc = data.desc\r\n        updateBoard(currTask)\r\n    }\r\n\r\n    const onSubmitItemInList = (data, idxInList) => {\r\n        const input = Object.keys(data).find(str => str === ('inputItem' + idxInList))\r\n        currTask.checklists[idxInList].list.push({ desc: data[input], isChecked: false })\r\n        updateBoard(currTask)\r\n    }\r\n\r\n    const changeCheckBox = (item) => {\r\n        item.isChecked = !item.isChecked\r\n        updateBoard(currTask)\r\n    }\r\n\r\n    const setRange = checklist => {\r\n        const itemsChecked = checklist.list.reduce((acc, itemInList) => {\r\n            return itemInList.isChecked + acc\r\n        }, 0)\r\n        const rengeToShow = +((itemsChecked / checklist.list.length * 100).toFixed(2))\r\n        checklist.range = rengeToShow\r\n        updateBoard(currTask)\r\n    }\r\n    // useEffect(() => {\r\n    //     console.log('currTask',currTask);\r\n    // })\r\n    const updateBoard = task => {\r\n        const updatedBoard = boardService.updateCard(task, currCard, currBoard)\r\n        dispatch(saveBoard(updatedBoard))\r\n        dispatch(setCurrBoard(currBoard._id))\r\n    }\r\n\r\n    return (\r\n        <div className=\"task-modal\">\r\n            {/* <form className=\"task-modal-form\" onChange={handleSubmit(onSubmit)}> */}\r\n            <div className=\"task-modal-form\">\r\n                <div className=\"task-header\">\r\n                    <div className=\"task-title\">\r\n                        <h3>{currTask.title}</h3>\r\n                        <p>In list: {currCard.title} </p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"task-description-modal\">\r\n                    {!currTask.dueDate ? null : <section>\r\n                        <Moment className=\"due-date-moment\" fromNow>{currTask.dueDate}</Moment>\r\n                        <Moment format=\"MMM D YYYY\" withTitle>{currTask.dueDate}</Moment>\r\n                    </section>}\r\n                    {!currTask.labels.length ? null : <section><h4>Lables</h4>\r\n                        {currTask.labels.map((label, idx) =>\r\n                            <div className=\"label-in-modal\" key={idx} style={{ backgroundColor: label.color }}>\r\n                                <p>{label.desc}</p>\r\n                            </div>)}\r\n                        <button onClick={() => setLabelModal(true)}>+ </button>\r\n                    </section>}\r\n                    {!currTask.members.length ? null : <section><h4>Members</h4>\r\n                        <div className=\"member-list\">\r\n                            {currTask.members.map((member, idx) =>\r\n                                <div className=\"member-in-modal\" key={idx}>\r\n                                    <Avatar key={idx} name={member.name} size=\"30\" round={true} />\r\n                                </div>)}\r\n                            <button onClick={() => setMemberModal(true)}>+</button>\r\n                        </div>\r\n                    </section>}\r\n\r\n                    <div className=\"desc-svg\"><FontAwesomeIcon icon={faAlignLeft} />\r\n                        <p>Description:</p>\r\n                    </div>\r\n                    <textarea id=\"desc\" name=\"desc\" onClick={() => setIsDesc(!isDesc)} defaultValue={descValue} placeholder=\"Add some detailed description...\" {...register(\"desc\")} defaultValue={taskModalOp.currTask.desc} />\r\n                    {isDesc && <div className=\"saveDesc\"><button onClick={(ev) => { ev.preventDefault(); setIsDesc(!isDesc) }} >Save</button> <button onClick={() => setIsDesc(false)}>x</button> </div>}\r\n                </div>\r\n                {!currTask.checklists.length ? null : <section >\r\n                    {currTask.checklists.map((checklist, listIdx) =>\r\n                        <div className=\"checklist-in-modal\" key={listIdx}>\r\n                            <div className=\"checklist-svg\"> <div className=\"flex\"> <FontAwesomeIcon icon={faList} ></FontAwesomeIcon> <p>{checklist.title}</p></div>\r\n                                <button onClick={() => taskModalOp.addChecklist(listIdx)}>delete list</button>\r\n                            </div>\r\n                            {!checklist.list.length ? null : <div className=\"demo-range-container\">\r\n                                <div className=\"demo-range-checked\" style={{ width: checklist.range + '%' }}></div>\r\n                            </div>}\r\n                            {!checklist.list.length ? null : <span>{checklist.range}%</span>}\r\n                            {!checklist.list.length ? null : checklist.list.map((item, idx) => {\r\n                                return <div className=\"checklist-items\" key={idx}>\r\n                                    <input type=\"checkbox\" id={'checklist-item-' + idx} checked={item.isChecked} onChange={() => {\r\n                                        changeCheckBox(item)\r\n                                        setRange(checklist)\r\n                                    }} />\r\n                                    {item.isChecked ? <label style={{ textDecoration: 'line-through' }}>{item.desc}</label> : <label>{item.desc}</label>}\r\n                                </div>\r\n                            })}\r\n                            <form onSubmit={handleSubmit(res => onSubmitItemInList(res, listIdx))}>\r\n                                <input type=\"text\" autoComplete=\"off\" id={'input-item-' + listIdx} name=\"item\" placeholder=\"add an item\"  {...register('inputItem' + listIdx)} />\r\n                                <button >Add An Item</button>\r\n\r\n                            </form>\r\n                        </div>)}\r\n                </section>}\r\n                <div className=\"task-comment\">\r\n                    <p>Post a Comment:</p>\r\n                    <input type=\"text\" autoComplete=\"off\" id=\"comment\" name=\"comment\" placeholder=\"Write a comment...\"  {...register(\"activity\")} defaultValue={currTask.activity} />\r\n                </div>\r\n                {/* </form> */}\r\n            </div>\r\n            <div className=\"add-to-task\">\r\n                <div className=\"right-task-modal\">\r\n                    <h3>Add To Task:</h3>\r\n                    <p onClick={() => taskModalOp.setCurrTask(null)} className=\"btn-close-icon\"><FontAwesomeIcon className=\"fa\" icon={faTimes} /></p>\r\n                </div>\r\n                <div className=\"right-task-modal-btns\">\r\n                    <div onClick={() => setLabelModal(true)} className=\"right-task-btn\">\r\n                        <FontAwesomeIcon icon={faTag}></FontAwesomeIcon>\r\n                        <p> Labels </p>\r\n                    </div>\r\n                    <div onClick={() => setMemberModal(true)} className=\"right-task-btn\">\r\n                        <FontAwesomeIcon icon={faUser}></FontAwesomeIcon>\r\n                        <p> Members </p>\r\n                    </div>\r\n                    <div onClick={() => setChecklistModal(true)} className=\"right-task-btn\">\r\n                        <FontAwesomeIcon icon={faList}></FontAwesomeIcon>\r\n                        <p> Checklist </p>\r\n                    </div>\r\n                    <div onClick={() => setDueDateModal(true)} className=\"right-task-btn\">\r\n                        <FontAwesomeIcon icon={faClock}></FontAwesomeIcon>\r\n                        <p> Due Date </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {(!labelModal) ? null : <LabelModal setLabelModal={setLabelModal} labelModal={labelModal} currTask={currTask} addLabel={taskModalOp.addLabel}  ></LabelModal>}\r\n            {(!memberModal) ? null : <MemberModal setMemberModal={setMemberModal} memberModal={memberModal} currTask={currTask} addMemberToTask={taskModalOp.addMember} ></MemberModal>}\r\n            {(!checklistModal) ? null : <CheckListModal setChecklistModal={setChecklistModal} checklistModal={checklistModal} currTask={currTask} addChecklist={taskModalOp.addChecklist} ></CheckListModal>}\r\n            {(!dueDateModal) ? null : <DueDateModal setDueDateModal={setDueDateModal} dueDateModal={dueDateModal} addDueDate={taskModalOp.addDueDate} currTask={currTask}></DueDateModal>}\r\n        </div>\r\n    )\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/homepage.e1823959.png\";","import { useEffect, useState } from 'react'\r\nimport Avatar from 'react-avatar'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport boardService from '../../services/boardService'\r\nimport { saveBoard, setCurrBoard } from '../../store/actions/boardActions'\r\nimport Moment from 'react-moment';\r\nimport './BoardMenu.scss'\r\nimport { faChevronLeft, faPalette, faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { utilService } from '../../services/utilService'\r\nimport imgLoader from '../../assets/imgs/homepage.png'\r\n\r\nexport function BoardMenu({ boardMenuOp }) {\r\n    const dispatch = useDispatch()\r\n    const { register, handleSubmit } = useForm();\r\n    const currBoard = useSelector(state => state.boardReducer.currBoard)\r\n    const [isAbout, setIsAbout] = useState(false)\r\n    const [isBackground, setIsBackground] = useState(false)\r\n    const [isFilter, setIsFilter] = useState(false)\r\n    const [isLabels, setIsLabels] = useState(false)\r\n    const [cloudImgs, setCloudImgs] = useState(null)\r\n    const [isAddLabel, setIsAddLabel] = useState(false)\r\n    const [filterBy, setFilterBy] = useState({ task: '', labels: [] })\r\n    const colors = ['lightgreen', 'lightyellow', 'lightblue', 'orange', 'slateblue', 'lightpink', 'lightgray', 'white']\r\n\r\n    useEffect(() => {\r\n        setCloudImgs(boardService.getCloudImages())\r\n        sendFilter()\r\n    }, [filterBy])\r\n\r\n    const onSearchTask = data => {\r\n        setFilterBy({ ...filterBy, task: data.searchTask })\r\n    }\r\n\r\n    const onSearchLabel = idx => {\r\n        if (filterBy.labels.includes(boardMenuOp.labels[idx].desc)) {\r\n            const removeIdx = filterBy.labels.findIndex(label => label === boardMenuOp.labels[idx].desc)\r\n            filterBy.labels.splice(removeIdx, 1)\r\n            setFilterBy({ ...filterBy, labels: filterBy.labels })\r\n        }\r\n        else setFilterBy({ ...filterBy, labels: [...filterBy.labels, boardMenuOp.labels[idx].desc] })\r\n    }\r\n\r\n    const sendFilter = () => {\r\n        boardMenuOp.filterTasks(filterBy)\r\n    }\r\n\r\n    const saveLabels = data => {\r\n        const descs = []\r\n        const colors = []\r\n        Object.keys(data).forEach(input => {\r\n            if (input.includes('editBoardLabelColor')) colors.push(input)\r\n            else if (input.includes('editBoardLabel')) descs.push(input)\r\n        })\r\n        const arrValues = Object.values(data)\r\n        arrValues.splice(0, 1)\r\n        const arr1 = []\r\n        const arr2 = []\r\n        arrValues.forEach((val, idx) => {\r\n            if (idx % 2 === 0) arr1.push(val)\r\n            else arr2.push(val)\r\n        })\r\n        const labels = arr1.map((val, idx) => {\r\n            return { desc: arr1[idx], color: arr2[idx] }\r\n        })\r\n        dispatch(saveBoard({ ...currBoard, labels: labels }))\r\n        setTimeout(() => dispatch(setCurrBoard(currBoard._id)), 100)\r\n    }\r\n\r\n    const onAddBoardLabel = (data) => {\r\n        const label = { desc: data.addBoardLabel, color: data.addBoardLabelColor }\r\n        currBoard.labels.push(label)\r\n        dispatch(saveBoard(currBoard))\r\n        setIsAddLabel(!isAddLabel)\r\n        boardMenuOp.addActivity('Aviv Zohar', 'added', 'label')\r\n    }\r\n\r\n    const deleteLabel = (idx) => {\r\n        currBoard.labels.splice(idx, 1)\r\n        dispatch(saveBoard(currBoard))\r\n        setTimeout(() => dispatch(setCurrBoard(currBoard._id)), 100)\r\n        boardMenuOp.addActivity('Aviv Zohar', 'deleted', 'label')\r\n    }\r\n\r\n    const closeMenu = () => {\r\n        boardMenuOp.setIsMenu(false)\r\n        setIsAbout(false)\r\n        setIsBackground(false)\r\n        setIsFilter(false)\r\n        setIsLabels(false)\r\n        onSearchTask('')\r\n    }\r\n\r\n    if (!cloudImgs || !currBoard) return (<div className=\"loader-container\">Loading</div>)\r\n\r\n    return (\r\n        <section className=\"board-menu flex\" style={boardMenuOp.isMenu ? { maxWidth: 100 + '%' } : { maxWidth: 0 }}>\r\n            <article className=\"menu-main\">\r\n                <div className=\"flex\">\r\n                    <h3>Menu</h3>\r\n                    <p onClick={closeMenu}><FontAwesomeIcon className=\"fa\" icon={faTimes} /></p>\r\n                </div>\r\n                <div className=\"flex\">\r\n                    <p onClick={() => setIsAbout(!isAbout)}>About this board</p>\r\n                    <p onClick={() => setIsBackground(!isBackground)}>Background</p>\r\n                    <p onClick={() => setIsFilter(!isFilter)}>Search cards</p>\r\n                    <p onClick={() => setIsLabels(!isLabels)}>Labels</p>\r\n                </div>\r\n                <div className=\"hide-overflow flex\">\r\n                    <h3>Activity</h3>\r\n                    <ul>\r\n                        {currBoard.activity.length && currBoard.activity.map(activity => <li key={activity._id}>\r\n                            {activity.type !== 'Attached' ? <p><span>{activity.member}</span> {activity.type} {activity.desc} {activity.type === 'deleted' ? 'from' : 'to'} <span>{activity.card}</span>{activity.card === 'board' ? '' : ' card'}.</p>\r\n                                : <p><span>{activity.member}</span> {activity.type} {activity.desc} {activity.type === 'deleted' ? 'from' : 'to'} <span>{activity.card}</span> task.</p>}\r\n                            <small><Moment fromNow>{activity.createdAt}</Moment></small>\r\n                        </li>)}\r\n                        {!currBoard.activity.length && <li><h1>No activity here...</h1></li>}\r\n                    </ul>\r\n                </div>\r\n            </article>\r\n            <article className=\"menu-about sub-menu\" style={isAbout ? { maxWidth: 100 + '%' } : { maxWidth: 0 }}>\r\n                <div className=\"flex\">\r\n                    <p onClick={() => setIsAbout(!isAbout)}><FontAwesomeIcon className=\"fa\" icon={faChevronLeft} /></p>\r\n                    <h3>About this board</h3>\r\n                    <p onClick={closeMenu}><FontAwesomeIcon className=\"fa\" icon={faTimes} /></p>\r\n                </div>\r\n                <div className=\"flex\">\r\n                    <h3>Members</h3>\r\n                    <div>{boardMenuOp.members.map((member, idx) => <Avatar key={idx} name={member.name} size=\"30\" round={true} />)}</div>\r\n                </div>\r\n                <div className=\"flex\">\r\n                    <h3>Description</h3>\r\n                    <textarea placeholder=\"Type here a description\" />\r\n                </div>\r\n                <div className=\"flex\">\r\n                    <h3>Statistics</h3>\r\n                </div>\r\n            </article>\r\n            <article className=\"menu-background sub-menu\" style={isBackground ? { maxWidth: 100 + '%' } : { maxWidth: 0 }}>\r\n                <div className=\"flex\">\r\n                    <p onClick={() => setIsBackground(!isBackground)}><FontAwesomeIcon className=\"fa\" icon={faChevronLeft} /></p>\r\n                    <h3>Change background</h3>\r\n                    <p onClick={closeMenu}><FontAwesomeIcon className=\"fa\" icon={faTimes} /></p>\r\n                </div>\r\n                <div className=\"hide-overflow flex\">\r\n                    <div className=\"flex\">\r\n                        <h4>Colors</h4>\r\n                        <div className=\"flex\">\r\n                            {colors.map((color, idx) => <aside key={idx} style={{ backgroundColor: color }} onClick={() => boardMenuOp.changeBackground(color, true)}></aside>)}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex\">\r\n                        <h4>Photos</h4>\r\n                        <div className=\"flex\">\r\n                            {cloudImgs.map((url, idx) => <img key={idx} onClick={() => boardMenuOp.changeBackground(url)} decoding=\"async\" loading=\"lazy\" src={url} alt={url} />)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </article>\r\n            <article className=\"menu-filter sub-menu\" style={isFilter ? { maxWidth: 100 + '%' } : { maxWidth: 0 }}>\r\n                <div className=\"flex\">\r\n                    <p onClick={() => setIsFilter(!isFilter)}><FontAwesomeIcon className=\"fa\" icon={faChevronLeft} /></p>\r\n                    <h3>Search cards</h3>\r\n                    <p onClick={closeMenu}><FontAwesomeIcon className=\"fa\" icon={faTimes} /></p>\r\n                </div>\r\n                <div>\r\n                    <form onChange={handleSubmit(onSearchTask)}>\r\n                        <input type=\"text\" placeholder=\"Search for task...\" {...register(\"searchTask\")} />\r\n                    </form>\r\n                </div>\r\n                <div>\r\n                    <h4>Search by label</h4>\r\n                    <ul>\r\n                        {boardMenuOp.labels.map((label, idx) => <li key={idx} style={{ backgroundColor: filterBy.labels.includes(label.desc) ? 'gray' : 'inherit' }} onClick={() => onSearchLabel(idx)}>\r\n                            <div style={{ backgroundColor: label.color }}></div>\r\n                            <p>{label.desc}</p>\r\n                        </li>)}\r\n                    </ul>\r\n                </div>\r\n            </article>\r\n            <article className=\"menu-labels sub-menu\" style={isLabels ? { maxWidth: 100 + '%' } : { maxWidth: 0 }}>\r\n                <div className=\"flex\">\r\n                    <p onClick={() => setIsLabels(!isLabels)}><FontAwesomeIcon className=\"fa\" icon={faChevronLeft} /></p>\r\n                    <h3>Labels</h3>\r\n                    <p onClick={closeMenu}><FontAwesomeIcon className=\"fa\" icon={faTimes} /></p>\r\n                </div>\r\n                <div className=\"hide-overflow\">\r\n                    <ul>\r\n                        {boardMenuOp.labels.map((label, idx) => <li key={idx} style={{ backgroundColor: label.color }}>\r\n                            <form onChange={handleSubmit(utilService.debounce(saveLabels, 800))}>\r\n                                <input type=\"text\" defaultValue={label.desc} placeholder=\"Label name\" required {...register(\"editBoardLabel\" + idx)} />\r\n                                <label name=\"label-color\"><FontAwesomeIcon className=\"fa\" icon={faPalette} />\r\n                                    <input type=\"color\" {...register(\"editBoardLabelColor\" + idx)} defaultValue={label.color} /></label>\r\n                            </form>\r\n                            <p><FontAwesomeIcon className=\"fa\" icon={faTimes} onClick={() => deleteLabel(idx)} /></p>\r\n                        </li>)}\r\n                        {!isAddLabel && <li onClick={() => setIsAddLabel(!isAddLabel)}><p>New label</p></li>}\r\n                        {isAddLabel && <li>\r\n                            <form onSubmit={handleSubmit(onAddBoardLabel)}>\r\n                                <input type=\"text\" placeholder=\"Label name\" autoComplete=\"off\" required {...register(\"addBoardLabel\")} />\r\n                                <input type=\"color\" name=\"label-color\" id=\"label-color\" defaultValue=\"#FFFFFF\" {...register(\"addBoardLabelColor\")} />\r\n                                <button>Add label</button>\r\n                            </form>\r\n                            <button onClick={() => setIsAddLabel(!isAddLabel)}>X</button></li>}\r\n                    </ul>\r\n                </div>\r\n            </article>\r\n        </section >\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/taskman-loader.d5d52ecc.svg\";","import { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { loadBoards, saveBoard, setCurrBoard, updateBackground } from '../../store/actions/boardActions'\r\nimport { CardPreview } from '../../cmps/CardPreview'\r\nimport './BoardDetails.scss'\r\nimport { TaskModal } from '../../cmps/TaskModal/TaskModal'\r\nimport { useForm } from \"react-hook-form\";\r\nimport boardService from '../../services/boardService'\r\nimport Avatar from 'react-avatar';\r\nimport { BoardMenu } from '../../cmps/BoardMenu'\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBars, faCheckCircle, faPlus } from '@fortawesome/free-solid-svg-icons'\r\nimport { utilService } from '../../services/utilService'\r\nimport loader from '../../assets/imgs/taskman-loader.svg'\r\n\r\nexport function BoardDetails(props) {\r\n    const dispatch = useDispatch()\r\n    const { register, handleSubmit } = useForm()\r\n    var newCard = boardService.getEmptyCard()\r\n    const [users, setUsers] = useState(boardService.getUsers())\r\n    const currBoard = useSelector(state => state.boardReducer.currBoard)\r\n    const [currCard, setCurrCard] = useState(null)\r\n    const [currTask, setCurrTask] = useState(null)\r\n    const [isAddCard, setIsAddCard] = useState(null)\r\n    const [isMenu, setIsMenu] = useState(false)\r\n    const [draggedCards, setDraggedCards] = useState(null)\r\n    const [isInvite, setIsInvite] = useState(null)\r\n    const [isCardModal, setIsCardModal] = useState(null)\r\n    const [x, setX] = useState(null)\r\n    const [cardModal, setCardModal] = useState(null)\r\n    const [addMembersToBoard, setMembersToBoard] = useState(null)\r\n    const [isDescShown, setIsDescShown] = useState(false)\r\n\r\n    useEffect(() => {\r\n        dispatch(updateBackground(false))\r\n        const { id } = props.match.params\r\n        if (!currBoard) dispatch(setCurrBoard(id))\r\n        else if (!draggedCards) setDraggedCards(currBoard.cards)\r\n        dispatch(loadBoards())\r\n        console.log('render!');\r\n    }, [currBoard])\r\n\r\n    //Card Drag\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n        const items = draggedCards;\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n        setDraggedCards(items);\r\n    }\r\n\r\n    // Card modal\r\n    const openCardModal = (ev, card) => {\r\n        setX(ev.clientX)\r\n        setIsCardModal(true)\r\n        setCardModal(card)\r\n    }\r\n\r\n    const closeModal = () => {\r\n        setCardModal(null)\r\n        setIsCardModal(false)\r\n    }\r\n\r\n    // forms\r\n    const setBoardTitle = data => {\r\n        dispatch(saveBoard({ ...currBoard, title: data.boardTitle }))\r\n    }\r\n\r\n    const addMemberToBoard = data => {\r\n        var userToAdd = users.filter(user => user.name.toLowerCase().includes(data.member.toLowerCase()))\r\n        if (data.member === '') userToAdd = null\r\n        setMembersToBoard(userToAdd)\r\n    }\r\n\r\n    const addLabel = (label) => {\r\n        if (!currTask.labels.length) currTask.labels.push(label)\r\n        else {\r\n            if (currTask.labels.some((currLabel) => currLabel.color === label.color)) {\r\n                //member is already in the Task\r\n                const labelToRemove = currTask.labels.findIndex(currLabel => currLabel.color === label.color)\r\n                currTask.labels.splice(labelToRemove, 1)\r\n            } else {\r\n                currTask.labels.push(label)\r\n            }\r\n        }\r\n        const newBoard = boardService.updateCard(currTask, currCard, currBoard)\r\n        dispatch(saveBoard(newBoard))\r\n        dispatch(setCurrBoard(newBoard._id))\r\n        addActivity('Aviv Zohar', 'added', 'labal')\r\n    }\r\n\r\n    const addChecklist = (list) => {\r\n        if (typeof list === 'object') currTask.checklists.push(list)\r\n        else {//variable \"list\" is an index of the checklist we want to remove from the array\r\n            currTask.checklists.splice(list, 1);\r\n        }\r\n        const newBoard = boardService.updateCard(currTask, currCard, currBoard)\r\n        dispatch(saveBoard(newBoard))\r\n        dispatch(setCurrBoard(newBoard._id))\r\n    }\r\n\r\n    const addDueDate = (date) => {\r\n        currTask.dueDate = date\r\n        const newBoard = boardService.updateCard(currTask, currCard, currBoard)\r\n        dispatch(saveBoard(newBoard))\r\n        dispatch(setCurrBoard(newBoard._id))\r\n    }\r\n\r\n    const addMember = (member) => {\r\n        if (!currTask.members.length) currTask.members.push(member)\r\n        else {\r\n            if (currTask.members.some((currMember) => currMember._id === member._id)) {\r\n                // member is already in the Task\r\n                const memberToRemove = currTask.members.findIndex(currMember => currMember._id === member._id)\r\n                currTask.members.splice(memberToRemove, 1)\r\n            } else {\r\n                currTask.members.push(member)\r\n            }\r\n        }\r\n        const newBoard = boardService.updateCard(currTask, currCard, currBoard)\r\n        dispatch(saveBoard(newBoard))\r\n        dispatch(setCurrBoard(newBoard._id))\r\n        addActivity('Aviv Zohar', 'Attached', member.name, currTask.title)\r\n    }\r\n\r\n    const addNewCard = (data) => {\r\n        newCard.title = data.newCardTitle\r\n        currBoard.cards.push(newCard)\r\n        setDraggedCards(currBoard.cards)\r\n        dispatch(saveBoard({ ...currBoard, cards: [...currBoard.cards, newCard] }))\r\n        setTimeout(() => dispatch(setCurrBoard(currBoard._id)), 150)\r\n        newCard = boardService.getEmptyCard()\r\n        setIsAddCard(!isAddCard)\r\n        data.newCardTitle = ''\r\n        addActivity('Aviv Zohar', 'added', 'card')\r\n    }\r\n\r\n    const deleteCard = () => {\r\n        const cardIdx = currBoard.cards.findIndex(card => card._id === currCard._id)\r\n        const boardToSave = boardService.updateBoard(cardIdx, currBoard)\r\n        dispatch(saveBoard(boardToSave))\r\n        dispatch(setCurrBoard(boardToSave._id))\r\n        addActivity('Aviv Zohar', 'deleted', 'card')\r\n        closeModal()\r\n    }\r\n\r\n    const changeBackground = (background, type) => {\r\n        if (type) {\r\n            addActivity('Aviv Zohar', 'change', 'color')\r\n            dispatch(saveBoard({ ...currBoard, background: { color: background, img: null } }))\r\n        }\r\n        else {\r\n            addActivity('Aviv Zohar', 'change', 'image')\r\n            dispatch(saveBoard({ ...currBoard, background: { color: null, img: background } }))\r\n        }\r\n        setTimeout(() => dispatch(setCurrBoard(currBoard._id)), 100)\r\n    }\r\n\r\n    const removeUserFromBoard = (user) => {\r\n        if (user.boards.includes(currBoard._id)) {\r\n            const boardIdx = user.boards.findIndex(board => board._id === currBoard._id)\r\n            user.boards.splice(boardIdx, 1)\r\n        } else {\r\n            user.boards.push(currBoard._id)\r\n        }\r\n    }\r\n\r\n    const filterTasks = (filterBy) => {\r\n        if (filterBy.task || filterBy.labels.length) {\r\n            var cards = currBoard.cards\r\n            if (filterBy.task) {\r\n                cards = currBoard.cards.find(card => {\r\n                    return card.tasks.find(task => {\r\n                        return task.title.includes(filterBy.task)\r\n                    })\r\n                })\r\n            }\r\n            if (filterBy.labels.length) {\r\n                cards = currBoard.cards.find(card => {\r\n                    return card.tasks.find(task => {\r\n                        return task.labels.find(label => label.desc.includes(filterBy.labels))\r\n                    })\r\n                })\r\n            }\r\n            if (!cards || !Object.keys(cards).length) {\r\n                const failCard = boardService.getEmptyCard()\r\n                failCard.title = 'There are no matched tasks.'\r\n                setDraggedCards([failCard])\r\n            } else setDraggedCards([cards])\r\n        } else setDraggedCards(currBoard.cards)\r\n    }\r\n\r\n    const addActivity = (member, type, desc, card = 'board') => {\r\n        const newActivity = { _id: utilService.makeId(), member, type, desc, card, createdAt: Date.now() }\r\n        currBoard.activity.unshift(newActivity)\r\n        dispatch(saveBoard(currBoard))\r\n        dispatch(setCurrBoard(currBoard._id))\r\n    }\r\n\r\n    if (!currBoard || !draggedCards || !draggedCards.length) return (<div className=\"loader-container\"><img src={loader} alt=\"\" /></div>)\r\n\r\n    const cardPreviewOp = {\r\n        openCardModal,\r\n        closeModal,\r\n        addActivity,\r\n        setCurrCard,\r\n        setCurrTask\r\n    }\r\n\r\n    const boardMenuOp = {\r\n        setIsMenu,\r\n        isMenu,\r\n        changeBackground,\r\n        members: currBoard.members,\r\n        filterTasks,\r\n        labels: currBoard.labels,\r\n        addActivity\r\n    }\r\n\r\n    const taskModalOp = {\r\n        setCurrTask,\r\n        currTask,\r\n        addLabel,\r\n        addMember,\r\n        addChecklist,\r\n        addDueDate\r\n    }\r\n\r\n    return (\r\n        <div className=\"board-details sub-container\">\r\n            <div className=\"board-header flex\">\r\n                <div className=\"flex\">\r\n                    <form onChange={handleSubmit(setBoardTitle)}>\r\n                        <input type=\"text\" id=\"title\" name=\"title\" {...register(\"boardTitle\")} defaultValue={currBoard.title} />\r\n                    </form>\r\n                    <div className=\"flex\">\r\n                        <div className=\"avatars\">\r\n                            {currBoard.members.map((member, idx) => <Avatar key={idx} name={member.name} size=\"30\" round={true} />)}\r\n                        </div>\r\n                        <button onClick={() => setIsInvite(!isInvite)}>Invite</button>\r\n                        {isInvite && <div className=\"invite-members-modal\">\r\n                            <form onChange={handleSubmit(addMemberToBoard)} >\r\n                                <div className=\"invite-title\">\r\n                                    <p>Invite to board:</p>\r\n                                    <input type=\"text\" autoComplete=\"off\" placeholder=\"Search Taskman Members..\" id=\"member\" name=\"member\"  {...register(\"member\")} />\r\n                                </div>\r\n                            </form>\r\n                            {addMembersToBoard && <div className=\"exist-members\">\r\n                                <ul>\r\n                                    {addMembersToBoard.map((member, idx) => {\r\n                                        if (!member.boards.includes(currBoard._id)) return (\r\n                                            <li key={member._id}>\r\n                                                <p>Add members:</p>\r\n                                                <button className=\"suggested-user\">\r\n                                                    <Avatar key={idx} name={member.name} size=\"30\" round={true} />\r\n                                                    <p>{member.name}</p>\r\n                                                    <p><FontAwesomeIcon icon={faPlus}></FontAwesomeIcon></p>\r\n                                                </button>\r\n                                            </li>\r\n                                        )\r\n                                    })}\r\n                                </ul>\r\n                            </div>}\r\n                            <div className=\"exist-members\">\r\n                                <p>Suggested Users:</p>\r\n                                {users.map((user, idx) => {\r\n                                    if (!user.boards.includes(currBoard._id)) return (\r\n                                        <button key={user._id} onClick={() => removeUserFromBoard(user)} className=\"suggested-user\">\r\n                                            <Avatar key={idx} name={user.name} size=\"30\" round={true} />\r\n                                            <p>{user.name}</p>\r\n                                            <p><FontAwesomeIcon icon={faPlus}></FontAwesomeIcon></p>\r\n                                        </button>\r\n\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                            <div className=\"exist-members\">\r\n                                <p>In This Board:</p>\r\n                                {users.map((user, idx) => {\r\n                                    if (user.boards.includes(currBoard._id)) return (\r\n                                        <button key={user._id} onClick={() => removeUserFromBoard(user)} className=\"suggested-user\">\r\n                                            <Avatar key={idx} name={user.name} size=\"30\" round={true} />\r\n                                            <p>{user.name}</p>\r\n                                            <p><FontAwesomeIcon icon={faCheckCircle} /></p>\r\n                                        </button>)\r\n                                })}\r\n                            </div>\r\n                        </div>}\r\n                    </div>\r\n                </div>\r\n                <div className=\"flex\">\r\n                    <p className=\"open-menu-btn\" onClick={() => setIsMenu(true)}><FontAwesomeIcon className=\"fa\" icon={faBars}></FontAwesomeIcon></p>\r\n                    <BoardMenu boardMenuOp={boardMenuOp}></BoardMenu>\r\n                </div>\r\n            </div>\r\n            <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                <Droppable droppableId=\"characters\" type=\"TASK\">\r\n                    {(provided) => (\r\n                        <div {...provided.droppableProps} ref={provided.innerRef} className=\"cards-container flex\">\r\n                            <div className=\"flex\">\r\n                                {draggedCards.map((card, idx) =>\r\n                                    <Draggable key={card._id} draggableId={card._id} index={idx}>\r\n                                        {provided => (<div {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}>\r\n                                            <CardPreview key={card._id} cardPreviewOp={cardPreviewOp} isDescShown={isDescShown} setIsDescShown={setIsDescShown} card={card}></CardPreview>\r\n                                        </div>)}\r\n                                    </Draggable>)}\r\n                                {provided.placeholder}\r\n                                {!isAddCard && <button className=\"add-card-btn\" onClick={() => setIsAddCard(!isAddCard)}> + Add Card.</button>}\r\n                                {isAddCard && <form className=\"add-card-container\" onSubmit={handleSubmit(addNewCard)}>\r\n                                    <input type=\"text\" id=\"title\" name=\"title\" {...register(\"newCardTitle\")} />\r\n                                    <button>Add Card</button>\r\n                                </form>}\r\n                            </div>\r\n                        </div>)}\r\n                </Droppable>\r\n            </DragDropContext>\r\n            {isCardModal && <div style={{ left: `${x}px`, top: `155px` }} className=\"card-modal\">\r\n                <div className=\"card-title-modal\">\r\n                    <p>{cardModal.title}</p>\r\n                    <button onClick={() => closeModal()}>x</button>\r\n                </div>\r\n                <div className=\"card-modal-btns\">\r\n                    <button onClick={deleteCard}>Delete This Card</button>\r\n                </div>\r\n            </div>}\r\n            {currTask && <TaskModal taskModalOp={taskModalOp}></TaskModal>}\r\n        </div>\r\n    )\r\n}","import { Link } from 'react-router-dom'\r\nimport './BoardPreview.scss'\r\n\r\nexport function BoardPreview({ board }) {\r\n    console.log('board:', board)\r\n\r\n    return (\r\n        <div className=\"board-link links\" style={board.background.img ? { backgroundImage: `url(${board.background.img})` } : { backgroundColor: board.background.color }}>\r\n            <Link className=\"link\" to={`/board/${board._id}`}>\r\n                <h4>{board.title}</h4>\r\n            </Link>\r\n        </div>\r\n    )\r\n}","import { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { BoardPreview } from '../BoardPreview'\r\nimport './BoardList.scss'\r\n\r\nexport function BoardList({ boardListOp }) {\r\n    const { register, handleSubmit } = useForm();\r\n    const [isCreateBoard, setIsCreateBoard] = useState(null)\r\n\r\n    const onAddBoard = data => {\r\n        boardListOp.addBoard(data.newBoardTitle)\r\n        setIsCreateBoard(!isCreateBoard)\r\n    }\r\n\r\n    return (\r\n        <ul className=\"board-container\">\r\n            {boardListOp.boards.map(board => <li key={board._id}><BoardPreview board={board}></BoardPreview></li>)}\r\n            <li className=\"board-link add-board\">\r\n                {!isCreateBoard && <button onClick={() => setIsCreateBoard(!isCreateBoard)}>Create board</button>}\r\n                {isCreateBoard &&\r\n                    <form onSubmit={handleSubmit(onAddBoard)}>\r\n                        <input type=\"text\" id=\"title\" name=\"title\" {...register(\"newBoardTitle\")} placeholder=\"Board name\" />\r\n                        <h4>Create board</h4>\r\n                    </form>}\r\n            </li>\r\n        </ul>\r\n    )\r\n}","import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { loadBoards, saveBoard } from '../../store/actions/boardActions.js'\r\nimport { BoardList } from '../../cmps/BoardList'\r\nimport './TaskmanApp.scss'\r\nimport boardService from '../../services/boardService.js'\r\nimport loader from '../../assets/imgs/taskman-loader.svg'\r\n\r\nexport function TaskmanApp() {\r\n    const dispatch = useDispatch()\r\n    const boards = useSelector(state => state.boardReducer.boards)\r\n    const newBoard = boardService.getEmptyBoard()\r\n\r\n    useEffect(() => {\r\n        dispatch(loadBoards())\r\n    }, [])\r\n\r\n    const addBoard = (title) => {\r\n        newBoard.title = title\r\n        dispatch(saveBoard(newBoard))\r\n        dispatch(loadBoards())\r\n    }\r\n\r\n    if (!boards || !boards.length) return (<div className=\"loader-container\"><img src={loader} alt=\"\" /></div>)\r\n\r\n    const boardListOp = {\r\n        boards,\r\n        addBoard\r\n    }\r\n\r\n    return (\r\n        <div className=\"sub-container\">\r\n            <h2>Your Workspace boards</h2>\r\n            <BoardList boardListOp={boardListOp}></BoardList>\r\n        </div >\r\n    )\r\n}\r\n","import { useSelector } from 'react-redux';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport './App.scss';\r\nimport { AppHeader } from './cmps/AppHeader';\r\nimport { BoardDetails } from './pages/BoardDetails';\r\nimport { TaskmanApp } from './pages/TaskmanApp';\r\n\r\nfunction App() {\r\n  const background = useSelector(state => state.boardReducer.background)\r\n  const currBoard = useSelector(state => state.boardReducer.currBoard)\r\n  return (\r\n    <Router>\r\n      <div className=\"App container\" style={!background ? currBoard ? currBoard.background.color ? { backgroundColor: currBoard.background.color } : { backgroundImage: currBoard.background.img ? `url(${currBoard.background.img})` : '' } : { backgroundColor: 'white' } : { backgroundColor: 'white' }}>\r\n        <AppHeader />\r\n        <Switch>\r\n          <Route component={BoardDetails} path='/board/:id?' />\r\n          <Route component={TaskmanApp} path='/' />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const INITIAL_STATE = {\r\n  boards: [],\r\n  currBoard: null,\r\n  background: false,\r\n  filterBy: null,\r\n}\r\n\r\nexport function boardReducer(state = INITIAL_STATE, action) {\r\n  switch (action.type) {\r\n    case 'SET_BOARDS':\r\n      return {\r\n        ...state,\r\n        boards: action.boards\r\n      }\r\n    case 'SET_BOARD':\r\n      return {\r\n        ...state,\r\n        currBoard: action.board\r\n      }\r\n    case 'ADD_BOARD':\r\n      return {\r\n        ...state,\r\n        boards: [...state.boards, action.board]\r\n      }\r\n    case 'REMOVE_BOARD':\r\n      return {\r\n        ...state,\r\n        boards: state.boards.filter(board => board._id !== action.boardId)\r\n      }\r\n    case 'UPDATE_BOARD':\r\n      const { updatedBoard } = action\r\n      return {\r\n        ...state,\r\n        boards: state.boards.map(board => board._id === updatedBoard._id ? updatedBoard : board)\r\n      }\r\n    case 'UPDATE_BACKGROUND':\r\n      return {\r\n        ...state,\r\n        background: action.background\r\n      }\r\n    case 'UPDATE_FILTERBY':\r\n      return {\r\n        ...state,\r\n        filterBy: action.filterBy\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport { boardReducer } from './reducers/boardReducer';\r\n// import { userReducer } from './reducers/userReducer';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst rootReducer = combineReducers({\r\n  boardReducer,\r\n  // userReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();"],"sourceRoot":""}