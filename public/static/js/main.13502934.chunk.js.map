{"version":3,"sources":["services/http.service.js","services/utilService.js","services/boardService.js","store/actions/boardActions.js","cmps/AppHeader/AppHeader.jsx","cmps/CardPreview/CardPreview.jsx","cmps/LabelEditModal/LabelEditModal.jsx","cmps/LabelModal/LabelModal.jsx","cmps/MemberModal/MemberModal.jsx","cmps/CheckListModal/CheckListModal.jsx","cmps/DueDateModal/DueDateModal.jsx","cmps/TaskModal/TaskModal.jsx","assets/imgs/homepage.png","cmps/BoardMenu/BoardMenu.jsx","assets/imgs/taskman-loader.svg","pages/BoardDetails/BoardDetails.jsx","cmps/BoardPreview/BoardPreview.jsx","cmps/BoardList/BoardList.jsx","pages/TaskmanApp/TaskmanApp.jsx","App.js","reportWebVitals.js","store/reducers/boardReducer.js","store/index.js","index.js"],"names":["BASE_URL","axios","Axios","create","withCredentials","httpService","endpoint","data","ajax","a","method","console","log","url","params","res","dir","response","status","utilService","getRandomInt","min","max","Math","ceil","floor","random","makeId","length","txt","possible","i","charAt","filter","term","arr","toLocaleLowerCase","board","name","includes","phone","email","sort","b","debounce","func","timeout","wait","args","later","clearTimeout","setTimeout","KEY","query","getBoardById","deleteBoard","saveBoard","getEmptyBoard","title","members","cards","_id","tasks","activity","background","labels","getEmptyCard","updateCard","taskToUpdate","cardToUpdate","boardToUpdate","taskIdx","findIndex","t","splice","updateBoard","getCloudImages","cloudUrls","getEmptyTask","desc","createdAt","Date","now","dueDate","isWithAttachment","cover","checklists","doneAt","id","cardIdx","card","loadBoards","filterBy","dispatch","boardService","boards","type","updatedBoard","setCurrBoard","boardId","updateBackground","AppHeader","useDispatch","className","onClick","to","icon","faHome","faUserCircle","CardPreview","props","cardPreviewOp","useForm","register","handleSubmit","currBoard","useSelector","state","boardReducer","useState","setTasks","isAddTask","setIsAddTask","newTask","useEffect","labelsDescToggle","ev","bool","stopPropagation","setIsDescShown","addTask","push","newBoard","addActivity","handleOnDragEnd","result","destination","items","Array","from","source","index","reorderedItem","boardToSave","setCurrCard","onChange","cardTitle","defaultValue","placeholder","openCardModal","onDragEnd","droppableId","provided","droppableProps","ref","innerRef","map","task","idx","draggableId","setCurrTask","draggableProps","dragHandleProps","isDescShown","label","style","backgroundColor","color","faList","reduce","accTotal","checklist","list","acc","itemInList","isChecked","faClock","format","withTitle","member","size","round","onSubmit","faTimes","LabelEditModal","setLabelEditModal","faChevronLeft","setLabelModal","LabelModal","labelEditModal","maxWidth","visibility","addLabel","currTask","find","currLabel","editLabel","faPencilAlt","MemberModal","setMemberModal","addMemberToTask","chooseMember","currMember","faCheckCircle","CheckListModal","formState","errors","setChecklistModal","newChecklistToSend","range","addChecklist","autoComplete","DueDateModal","timeStemp","React","selectedDate","setSelectedDate","setDueDateModal","selectedDateStr","parse","addDueDate","utils","DateFnsUtils","disableToolbar","variant","margin","value","date","KeyboardButtonProps","TaskModal","taskModalOp","labelModal","memberModal","checklistModal","dueDateModal","isDesc","setIsDesc","currCard","fromNow","faAlignLeft","descValue","preventDefault","listIdx","width","item","checked","changeCheckBox","rengeToShow","toFixed","setRange","textDecoration","idxInList","input","Object","keys","str","onSubmitItemInList","faTag","faUser","addMember","BoardMenu","boardMenuOp","isAbout","setIsAbout","isBackground","setIsBackground","isFilter","setIsFilter","isLabels","setIsLabels","cloudImgs","setCloudImgs","isAddLabel","setIsAddLabel","setFilterBy","sendFilter","onSearchTask","searchTask","filterTasks","saveLabels","descs","colors","forEach","arrValues","values","arr1","arr2","val","closeMenu","setIsMenu","isMenu","changeBackground","decoding","loading","src","alt","removeIdx","onSearchLabel","required","faPalette","deleteLabel","addBoardLabel","addBoardLabelColor","BoardDetails","newCard","getUsers","users","isAddCard","setIsAddCard","draggedCards","setDraggedCards","isInvite","setIsInvite","isCardModal","setIsCardModal","x","setX","cardModal","setCardModal","addMembersToBoard","setMembersToBoard","match","closeModal","addNewCard","newCardTitle","removeUserFromBoard","user","boardIdx","newActivity","unshift","loader","clientX","img","failCard","some","labelToRemove","memberToRemove","boardTitle","userToAdd","toLowerCase","faPlus","faBars","left","top","BoardPreview","backgroundImage","BoardList","boardListOp","isCreateBoard","setIsCreateBoard","addBoard","newBoardTitle","TaskmanApp","App","component","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13502934.chunk.js","sourcesContent":["import Axios from 'axios'\r\n// import { router } from '@/router'\r\n\r\nconst BASE_URL = process.env.NODE_ENV === 'production' ?\r\n    '/api/' :\r\n    '//localhost:3030/api/'\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n})\r\n\r\nexport const httpService = {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\nasync function ajax(endpoint, method = 'GET', data = null) {\r\n    console.log(`${BASE_URL}${endpoint}`);\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data,\r\n            params: (method === 'GET') ? data : null\r\n        })\r\n        return res.data\r\n    } catch (err) {\r\n        console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`)\r\n        console.dir(err)\r\n        if (err.response && err.response.status === 401) {\r\n            // Depends on routing startegy - hash or history\r\n            // window.location.assign('/#/login')\r\n            // window.location.assign('/login')\r\n            // router.push('/login')\r\n        }\r\n        throw err\r\n    }\r\n}","export const utilService = {\r\n  getRandomInt,\r\n  makeId,\r\n  filter,\r\n  sort,\r\n  debounce,\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n\r\nfunction makeId(length = 10) {\r\n  var txt = ''\r\n  var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\r\n  for (var i = 0; i < length; i++) {\r\n    txt += possible.charAt(Math.floor(Math.random() * possible.length))\r\n  }\r\n  return txt\r\n}\r\n\r\nfunction filter(term, arr) {\r\n  term = term.toLocaleLowerCase()\r\n  return arr.filter(board => {\r\n    return board.name.toLocaleLowerCase().includes(term) ||\r\n      board.phone.toLocaleLowerCase().includes(term) ||\r\n      board.email.toLocaleLowerCase().includes(term)\r\n  })\r\n}\r\n\r\nfunction sort(arr) {\r\n  return arr.sort((a, b) => {\r\n    if (a.name.toLocaleLowerCase() < b.name.toLocaleLowerCase()) {\r\n      return -1;\r\n    }\r\n    if (a.name.toLocaleLowerCase() > b.name.toLocaleLowerCase()) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  })\r\n}\r\n\r\nfunction debounce(func, wait = 1000) {\r\n  let timeout;\r\n  return function (...args) {\r\n    const later = () => {\r\n      clearTimeout(timeout);\r\n      func(...args);\r\n    };\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n  };\r\n}","import { httpService } from \"./http.service\"\r\nimport { utilService } from \"./utilService\"\r\n\r\nconst KEY = 'board/'\r\n\r\nexport default {\r\n    query,\r\n    getBoardById,\r\n    deleteBoard,\r\n    saveBoard,\r\n    getEmptyBoard,\r\n    getEmptyCard,\r\n    updateCard,\r\n    updateBoard,\r\n    getCloudImages,\r\n    getEmptyTask,\r\n}\r\n\r\nconst cloudUrls = [\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621015877/taskman/jared-verdi-PNKwdJ8WetM-unsplash_aabpzg.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016569/taskman/zsofia-szalay-TbrzJbcacnQ-unsplash_bst628.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016567/taskman/the-nigmatic-lUnLaEWzcz8-unsplash_vcfxju.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016565/taskman/steve-johnson-274PPmlOjyQ-unsplash_twaarr.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016564/taskman/omer-salom-LoijtQXXNhs-unsplash_w6cs4h.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016564/taskman/jonny-gios-h_XcnLbDc_0-unsplash_lhi5si.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016564/taskman/inaki-del-olmo-IRCzpl2YYKE-unsplash_tpzeyw.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016564/taskman/joel-holland-TRhGEGdw-YY-unsplash_dqapzs.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016558/taskman/ian-schneider-TamMbr4okv4-unsplash_r85bnj.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016557/taskman/mohammad-alizade-CDu0x1Aiils-unsplash_jqizxr.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016556/taskman/mohammad-alizade-62t_kKa2YlA-unsplash_rbytvb.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016555/taskman/mohamed-rishfaan-ir_65wcK_DA-unsplash_qgfljs.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016554/taskman/ines-mills-TGs0tHMk4eg-unsplash_bkqpbf.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016551/taskman/erol-ahmed-aIYFR0vbADk-unsplash_g8hmym.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016551/taskman/duy-thanh-nguyen-ZeoSVUcWjfY-unsplash_z4qs2l.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016550/taskman/fransiskus-filbert-mangundap-C9hqYikX34w-unsplash_mqj9zi.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016548/taskman/arpad-spodni-KbKQY_LjmuE-unsplash_fqlcyv.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016546/taskman/dave-hoefler-PkQH-GHEp0A-unsplash_jfurlc.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016544/taskman/fabrice-villard-Du41jIaI5Ww-unsplash_kqcna2.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016542/taskman/estee-janssens-aQfhbxailCs-unsplash_slddqg.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016542/taskman/angel-luciano-XQJ0BBSvTs0-unsplash_d7advt.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016538/taskman/callum-wale-V8j3F6Ik9_s-unsplash_clbkte.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016537/taskman/braden-jarvis-prSogOoFmkw-unsplash_sgtmnd.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016534/taskman/danielle-macinnes-IuLgi9PWETU-unsplash_u9xmg7.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621016533/taskman/carolyn-christine-D7bmnvGJA2Q-unsplash_oz27jz.jpg',\r\n    'https://res.cloudinary.com/dtu0lzwpw/image/upload/v1621018122/taskman/vlad-kutepov-WYJ9c7uSdnU-unsplash_c2g6gy.jpg',\r\n]\r\n\r\n// CRUDL\r\nasync function query() {\r\n    try {\r\n        return await httpService.get(KEY)\r\n    } catch (err) {\r\n        console.log('err:', err)\r\n    }\r\n}\r\n\r\nasync function getBoardById(id) {\r\n    try {\r\n        return await httpService.get(KEY + id)\r\n    } catch (err) {\r\n        console.log('err:', err)\r\n    }\r\n}\r\n\r\nasync function deleteBoard(id) {\r\n    try {\r\n        return await httpService.delete(KEY + id)\r\n    } catch (err) {\r\n        console.log('Error from boardService - ', err);\r\n    }\r\n}\r\n\r\nasync function saveBoard(board) {\r\n    try {\r\n        if (board._id) return await httpService.put(KEY + board._id, board)\r\n        return await httpService.post(KEY, board)\r\n    } catch (err) {\r\n        console.log('err:', err)\r\n    }\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nfunction updateCard(taskToUpdate, cardToUpdate, boardToUpdate) {\r\n    // if you want to delete a task use the func and send the idx ----updateBoard(idx)----\r\n    if (typeof (taskToUpdate) !== 'number') {\r\n        const taskIdx = cardToUpdate.tasks.findIndex(t => t._id === taskToUpdate._id)\r\n        cardToUpdate.tasks.splice(taskIdx, 1, taskToUpdate)\r\n    } else {\r\n        cardToUpdate.tasks.splice(taskToUpdate, 1)\r\n    }\r\n    return updateBoard(cardToUpdate, boardToUpdate)\r\n}\r\n\r\nfunction updateBoard(cardToUpdate, boardToUpdate) {\r\n    if (typeof (cardToUpdate) !== 'number') {\r\n        const cardIdx = boardToUpdate.cards.findIndex(card => card._id === cardToUpdate._id)\r\n        boardToUpdate.cards.splice(cardIdx, 1, cardToUpdate)\r\n    } else {\r\n        boardToUpdate.cards.splice(cardToUpdate, 1)\r\n    }\r\n    const updatedBoard = { ...boardToUpdate, cards: [...boardToUpdate.cards] }\r\n    return updatedBoard;\r\n}\r\n\r\n// get functions /////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nfunction getCloudImages() {\r\n    return cloudUrls;\r\n}\r\n\r\nfunction getEmptyBoard() {\r\n    return {\r\n        title: '',\r\n        members: [],\r\n        cards: [{ _id: utilService.makeId(), title: 'Your first card!', tasks: [] }],\r\n        activity: [],\r\n        background: [],\r\n        labels: [],\r\n    }\r\n}\r\n\r\nfunction getEmptyCard() {\r\n    return {\r\n        _id: utilService.makeId(),\r\n        title: '',\r\n        tasks: []\r\n    }\r\n}\r\n\r\nfunction getEmptyTask() {\r\n    return {\r\n        _id: utilService.makeId(),\r\n        title: '',\r\n        desc: null,\r\n        createdAt: Date.now(),\r\n        labels: [],\r\n        dueDate: '',\r\n        activity: [],\r\n        members: [],\r\n        isWithAttachment: false,\r\n        cover: 'white',\r\n        checklists: [],\r\n        doneAt: null\r\n    }\r\n}","import boardService from '../../services/boardService'\r\n\r\nexport function loadBoards(filterBy) {\r\n  return async dispatch => {\r\n    const boards = await boardService.query(filterBy)\r\n    console.log('boards:', boards)\r\n    const action = { type: 'SET_BOARDS', boards }\r\n    dispatch(action)\r\n  }\r\n}\r\nexport function getBoardById(boardId) {\r\n  return async dispatch => {\r\n    const board = await boardService.getBoardById(boardId)\r\n    await dispatch({ type: 'SET_BOARD', board })\r\n    return board\r\n  }\r\n}\r\nexport function saveBoard(board) {\r\n  return async dispatch => {\r\n    const updatedBoard = await boardService.saveBoard(board)\r\n    if (!board._id) return dispatch({ type: 'ADD_BOARD', board: updatedBoard })\r\n    else return dispatch({ type: 'UPDATE_BOARD', updatedBoard })\r\n  }\r\n}\r\nexport function setCurrBoard(boardId) {\r\n  return async dispatch => {\r\n    const board = await boardService.getBoardById(boardId)\r\n    dispatch({ type: 'SET_BOARD', board })\r\n  }\r\n}\r\nexport function removeBoard(boardId) {\r\n  return async dispatch => {\r\n    await boardService.remove(boardId)\r\n    dispatch({ type: 'REMOVE_BOARD', boardId })\r\n  }\r\n}\r\nexport function updateBackground(background) {\r\n  return async dispatch => {\r\n    dispatch({ type: 'UPDATE_BACKGROUND', background })\r\n  }\r\n}\r\nexport function updateFilterBy(filterBy) {\r\n  return async dispatch => {\r\n    dispatch({ type: 'UPDATE_FILTERBY', filterBy })\r\n  }\r\n}","import { Link } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHome, faUserCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport './AppHeader.scss'\r\nimport { useDispatch } from 'react-redux'\r\nimport { updateBackground } from '../../store/actions/boardActions'\r\n\r\nexport function AppHeader() {\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <nav className=\"app-header sub-container\">\r\n            <Link className=\"link\" onClick={() => dispatch(updateBackground(true))} to=\"/\"><FontAwesomeIcon icon={faHome} /></Link>\r\n            <Link className=\"link\" onClick={() => dispatch(updateBackground(true))} to=\"/\">Taskman</Link>\r\n            <Link className=\"link\" onClick={() => dispatch(updateBackground(true))} to=\"/\"><FontAwesomeIcon icon={faUserCircle} /></Link>\r\n        </nav>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { saveBoard, setCurrBoard } from '../../store/actions/boardActions';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport boardService from '../../services/boardService';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHome, faCheckSquare, faList, faTimes, faClock } from '@fortawesome/free-solid-svg-icons'\r\nimport './CardPreview.scss'\r\nimport Avatar from 'react-avatar';\r\nimport Moment from 'react-moment';\r\n\r\n\r\nexport function CardPreview(props) {\r\n    const { card, cardPreviewOp } = props\r\n    const dispatch = useDispatch()\r\n    const { register, handleSubmit } = useForm();\r\n    const currBoard = useSelector(state => state.boardReducer.currBoard)\r\n    const [tasks, setTasks] = useState(card.tasks)\r\n    const [isAddTask, setIsAddTask] = useState(null)\r\n    var newTask = boardService.getEmptyTask()\r\n\r\n    const setCardTitle = data => {\r\n        card.title = data.cardTitle\r\n        const boardToUpdate = boardService.updateBoard(card, currBoard)\r\n        dispatch(saveBoard(boardToUpdate))\r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log('currBoard', currBoard);\r\n    })\r\n    //Hadar's-----------------------DONT DELETE YA ZONOT\r\n\r\n    // tasks:\r\n    // activity: []\r\n    // checklists: (2) [{…}, {…}]    {title: \"a\", list: Array(1), range: 0}  {desc: \"as\", isChecked: false}\r\n    // cover: \"white\"\r\n    // createdAt: 1620731453432\r\n    // desc: \"\"\r\n    // doneAt: null\r\n    // isDone: false\r\n    // isWithAttachment: false\r\n    // labels: (4) [{…}, {…}, {…}, {…}]\r\n    // members: (3) [{…}, {…}, {…}]   {_id: \"m101\", name: \"Aviv Zohar\"}\r\n    // title: \"app\"\r\n\r\n    const labelsDescToggle = (ev, bool) => {\r\n        ev.stopPropagation()\r\n        props.setIsDescShown(bool)\r\n        dispatch(setCurrBoard(currBoard._id))\r\n    }\r\n    const addTask = async data => {\r\n        newTask.title = data.newTask\r\n        tasks.push(newTask)\r\n        setTasks(tasks)\r\n        const newBoard = boardService.updateCard(newTask, card, currBoard)\r\n        dispatch(saveBoard(newBoard))\r\n        dispatch(setCurrBoard(currBoard._id))\r\n        newTask = boardService.getEmptyTask()\r\n        setIsAddTask(!isAddTask)\r\n        data.newTask = ''\r\n        cardPreviewOp.addActivity('Aviv Zohar', 'added', 'task', card.title)\r\n    }\r\n\r\n    const handleOnDragEnd = async (result) => {\r\n        if (!result.destination) return;\r\n        const items = Array.from(tasks);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n        card.tasks = items\r\n        setTasks(card.tasks);\r\n        const boardToSave = await boardService.updateBoard(card, currBoard)\r\n        dispatch(saveBoard(boardToSave))\r\n        dispatch(setCurrBoard(currBoard._id))\r\n    }\r\n    return (\r\n        <div className=\"board-card\" onClick={() => cardPreviewOp.setCurrCard(card)} >\r\n            <div className=\"hide-overflow\">\r\n                <div className=\"title\">\r\n                    <form onChange={handleSubmit(setCardTitle)}>\r\n                        <input type=\"text\" {...register(\"cardTitle\")} defaultValue={card.title} placeholder=\"Card name\" />\r\n                    </form>\r\n                    <div onClick={(ev) => cardPreviewOp.openCardModal(ev, card)} className=\"manage-card\"><p>⋮</p></div>\r\n                </div>\r\n                <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                    <Droppable droppableId=\"tasks\">\r\n                        {(provided) => (\r\n                            <ul {...provided.droppableProps} ref={provided.innerRef} className=\"tasks-container\">\r\n                                {tasks.map((task, idx) => {\r\n                                    return (\r\n                                        <Draggable key={task._id} draggableId={task._id} index={idx}>\r\n                                            {(provided) => (\r\n                                                <li onClick={() => cardPreviewOp.setCurrTask(task)} key={task._id} {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef} className=\"card-task\">\r\n                                                    <div className=\"label-color-to-preview-container\">\r\n                                                        {!props.isDescShown && task.labels.map((label, idx) => <label key={idx} className=\"label-color-to-preview\" style={{ backgroundColor: `${label.color}` }} onClick={(ev) => labelsDescToggle(ev, true)}></label>)}\r\n                                                        {props.isDescShown && task.labels.map((label, idx) => <label key={idx} className=\"label-color-open-to-preview\" style={{ backgroundColor: `${label.color}`}} onClick={(ev) => labelsDescToggle(ev, false)}>{label.desc}</label>)}\r\n                                                    </div>\r\n                                                    <span>{task.title}</span>\r\n                                                    <section className=\"buttom-preview-info\">\r\n                                                        {!task.checklists.length ? null :\r\n                                                            <p><FontAwesomeIcon icon={faList} />\r\n                                                                {task.checklists.reduce((accTotal, checklist) => {\r\n                                                                    return accTotal + checklist.list.reduce((acc, itemInList) => itemInList.isChecked + acc, 0)\r\n                                                                }, 0)}/\r\n                                                        {task.checklists.reduce((acc, checklist) => checklist.list.length + acc, 0)}\r\n                                                            </p>}\r\n                                                        {!task.dueDate ? null : <div className=\"due-date-to-preview\"><FontAwesomeIcon icon={faClock} /><Moment className=\"due-date-to-preview\" format=\"MMM D\" withTitle>{task.dueDate}</Moment></div>}\r\n                                                        {!task.members.length ? null :\r\n                                                            <div>\r\n                                                                {task.members.map((member, idx) => <Avatar key={idx} name={member.name} size=\"30\" round={true} />)}\r\n                                                            </div>}\r\n                                                    </section>\r\n                                                </li>\r\n                                            )\r\n                                            }</Draggable>)\r\n                                })}{provided.placeholder}\r\n                            </ul>)}\r\n                    </Droppable>\r\n                </DragDropContext>\r\n                {!isAddTask && <button className=\"add-task-btn\" onClick={() => setIsAddTask(!isAddTask)}> + Add a task:</button>}\r\n                {isAddTask && <div className=\"add-card-container\"><form onSubmit={handleSubmit(addTask)}>\r\n                    <textarea type=\"text\" id=\"title\" name=\"title\" {...register(\"newTask\")} placeholder=\"Task name\" defaultValue={newTask.title} />\r\n                    <button>Add Task</button>\r\n                </form>\r\n                    <p onClick={() => setIsAddTask(!isAddTask)}><FontAwesomeIcon className=\"fa\" icon={faTimes} /></p>\r\n                </div>\r\n                }\r\n            </div>\r\n        </div >\r\n\r\n    )\r\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faChevronLeft, faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport './LabelEditModal.scss'\r\n\r\n export function LabelEditModal (props) {\r\n\r\n        return (\r\n            <div className=\"label-edit-modal\">\r\n                <div className=\"labels-edit-modal-header\">\r\n                    <button onClick={()=>props.setLabelEditModal(false)}><FontAwesomeIcon icon={faChevronLeft} /></button>\r\n                    <h3>Labels</h3>\r\n                    <p className=\"btn-close-icon\" onClick={()=>props.setLabelModal(false)}><FontAwesomeIcon className=\"fa\" icon={faTimes} /></p>\r\n                </div>\r\n                <h1>edit that madafaka label</h1>\r\n            </div>\r\n        )\r\n}\r\n","\r\n\r\nimport { useEffect, useState } from 'react'\r\nimport boardService from '../../services/boardService'\r\nimport { LabelEditModal } from '../LabelEditModal/LabelEditModal'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimes, faPencilAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport './LabelModal.scss'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport function LabelModal(props) {\r\n    const [labelEditModal, setLabelEditModal] = useState(null)\r\n    const currBoard = useSelector(state => state.boardReducer.currBoard)\r\n    const labels = currBoard.labels\r\n\r\n    const func = (ev) => {\r\n        console.log('ev.pageX:', ev.pageX)\r\n        console.log('ev.pageX:', ev.pageY)\r\n        console.log('props:', props.addLabel)\r\n    }\r\n\r\n    const chooseLabel = (color) => {\r\n        props.addLabel(color)\r\n    }\r\n\r\n    const editLabel = (ev, label) => {\r\n        ev.stopPropagation()\r\n        setLabelEditModal(label)\r\n    }\r\n    useEffect(() => {\r\n        // console.log('props.currTask:', props.currTask.labels)\r\n    })\r\n    // const isHasV = (currLabel) => {\r\n    //     // console.log('currLabel:', currLabel)\r\n    //     const a= props.currTask.labels.some((label) => {\r\n    //         // console.log('label.color:', label.color)\r\n    //         // console.log(' currLabel.color:',  currLabel.color)\r\n    //         // console.log('label.color === currLabel.color:', label.color === currLabel.color)\r\n    //         return label.color === currLabel.color\r\n    //     })\r\n    //     console.log('a',a);\r\n    //     return <h1>v</h1>\r\n    // }\r\n    return (\r\n        <section >\r\n            {/* <div className=\"label-modal\" style={`top:${pageY}px}`}> */}\r\n            {/* <button onClick={func}>click</button> */}\r\n            {  <div className=\"label-modal\" style={!labelEditModal ? { maxWidth: 100 + '%' } : { maxWidth: 0, visibility: 'visible' }}>\r\n                <div className=\"labels-modal-header\">\r\n                    <h3>Labels</h3>\r\n                    <p className=\"btn-close-icon\" onClick={() => props.setLabelModal(false)}><FontAwesomeIcon className=\"fa\" icon={faTimes} /></p>\r\n                </div>\r\n                <ul className=\"label-container\">\r\n                    {labels.map((label, idx) => {\r\n                        return <li onClick={() => chooseLabel(label)} key={idx}  >\r\n                            <div className=\"label-to-show\" style={{ backgroundColor: `${label.color}` }}>\r\n                                <span>{label.desc}</span>\r\n                                <span>{(props.currTask.labels.find((currLabel) => currLabel.color === label.color) ? 'v' : null)}</span>\r\n                            </div>\r\n                            <button className=\"edit-label-btn\" onClick={(ev) => editLabel(ev, label)}><FontAwesomeIcon icon={faPencilAlt} /></button>\r\n                        </li>\r\n                    })}\r\n                </ul>\r\n            </div>}\r\n            { labelEditModal && <LabelEditModal setLabelModal={props.setLabelModal} setLabelEditModal={setLabelEditModal} addLabel={props.addLabel}></LabelEditModal>}\r\n        </section >\r\n    )\r\n}\r\n\r\n","\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimes, faPencilAlt, faCheckCircle } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport './MemberModal.scss'\r\nimport { useSelector } from 'react-redux'\r\nimport Avatar from 'react-avatar'\r\n\r\nexport function MemberModal(props) {\r\n    const chooseMember = (member) => {\r\n        props.addMemberToTask(member)\r\n    }\r\n    var currBoard = useSelector(state => state.boardReducer.currBoard)\r\n    return (\r\n        <div className=\"member-modal\" style={true ? { maxWidth: 100 + '%' } : { maxWidth: 0, visibility: 'visible' }}>\r\n            <div className=\"member-modal-header\">\r\n                <h3>Members</h3>\r\n                <p className=\"btn-close-icon\" onClick={() => props.setMemberModal(false)}><FontAwesomeIcon className=\"fa\" icon={faTimes} /></p>\r\n\r\n            </div>\r\n            <ul className=\"member-container\">\r\n                {currBoard.members.map((member, idx) => {\r\n                    return <li onClick={() => chooseMember(member)} key={idx}  >\r\n                        <div className=\"member-details\">\r\n                        <Avatar key={idx} name={member.name} size=\"30\" round={true} />\r\n                        <span >{member.name}</span>\r\n                        </div>\r\n                        <span >{(props.currTask.members.find((currMember) => currMember._id === member._id) ? <FontAwesomeIcon icon={faCheckCircle}> </FontAwesomeIcon> : null)}</span>\r\n                    </li>\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n","\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport './CheckListModal.scss'\r\n\r\nexport function CheckListModal(props) {\r\n    const { register, handleSubmit, formState: { errors } } = useForm();\r\n    const setTitle = data => {\r\n        const newChecklistToSend = { title: data.title, list: [], range: 0 }\r\n        props.addChecklist(newChecklistToSend)\r\n        props.setChecklistModal(false)\r\n    }\r\n    return (\r\n        <div className=\"checklist-modal\" >\r\n            <section className=\"checklist-modal-header\">\r\n                <h3>Add Checklist</h3>\r\n                <p className=\"btn-close-icon\" onClick={() => props.setChecklistModal(false)}><FontAwesomeIcon className=\"fa\" icon={faTimes} /></p>\r\n            </section>\r\n            <form className=\"checklist-modal-main\" onSubmit={handleSubmit(setTitle)}>\r\n                <label>Title</label>\r\n                <input type=\"text\" autoComplete=\"off\" id=\"title\" name=\"title\"  {...register(\"title\")} defaultValue='' />\r\n                <button>Add</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import './DueDateModal.scss'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport 'date-fns';\r\nimport React from 'react';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\nexport function DueDateModal(props) {\r\n    const timeStemp = Date.now() + 604800000 //the default is next week\r\n    const defaultNextWeek = new Date(Date.now() + 604800000);\r\n    const [selectedDate, setSelectedDate] = React.useState(timeStemp);\r\n\r\n    const submit = () => {\r\n        var selectedDateStr = Date.parse(selectedDate)\r\n        props.addDueDate(selectedDateStr)\r\n        props.setDueDateModal(false)\r\n    }\r\n\r\n    return (\r\n        <div className=\"due-date-modal\">\r\n            <section className=\"due-date-modal-header\">\r\n                <h3>Due Date</h3>\r\n                <p className=\"btn-close-icon\" onClick={() => props.setDueDateModal(false)}><FontAwesomeIcon className=\"fa\" icon={faTimes} /></p>\r\n            </section>\r\n            <form onSubmit={submit}>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                    <KeyboardDatePicker\r\n                        disableToolbar\r\n                        variant=\"inline\"\r\n                        format=\"dd/MM/yyyy\"\r\n                        margin=\"normal\"\r\n                        id=\"date-picker-inline\"\r\n                        label=\"Pick A Deadline\"\r\n                        value={selectedDate}\r\n                        onChange={(date) => setSelectedDate(date)}\r\n                        KeyboardButtonProps={{ 'aria-label': 'change date', }}\r\n                    ></KeyboardDatePicker>\r\n                </MuiPickersUtilsProvider>\r\n                <button >save</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faAlignLeft, faClock, faList, faTag, faTimes, faUser } from '@fortawesome/free-solid-svg-icons'\r\nimport boardService from '../../services/boardService.js'\r\nimport './TaskModal.scss'\r\nimport Avatar from 'react-avatar';\r\nimport { LabelModal } from '../LabelModal/LabelModal';\r\nimport { MemberModal } from '../MemberModal/MemberModal';\r\nimport { CheckListModal } from '../CheckListModal/CheckListModal';\r\nimport { saveBoard, setCurrBoard } from '../../store/actions/boardActions';\r\nimport { DueDateModal } from '../DueDateModal/DueDateModal.jsx';\r\nimport Moment from 'react-moment';\r\n\r\nexport function TaskModal(props) {\r\n    const { taskModalOp } = props\r\n    const { currTask } = taskModalOp\r\n    const dispatch = useDispatch()\r\n    const { register, handleSubmit } = useForm();\r\n    const [labelModal, setLabelModal] = useState(false)\r\n    const [memberModal, setMemberModal] = useState(false)\r\n    const [checklistModal, setChecklistModal] = useState(false)\r\n    const [dueDateModal, setDueDateModal] = useState(false)\r\n    const [isDesc, setIsDesc] = useState(false)\r\n\r\n    var descValue;\r\n    var currBoard = useSelector(state => state.boardReducer.currBoard)\r\n\r\n    const currCard = currBoard.cards.find(card => {\r\n        return card.tasks.find(t => {\r\n            return t._id === currTask._id\r\n        })\r\n    })\r\n\r\n    const onSubmit = data => {\r\n        currTask.desc = data.desc\r\n        updateBoard(currTask)\r\n    }\r\n\r\n    const onSubmitItemInList = (data, idxInList) => {\r\n        const input = Object.keys(data).find(str => str === ('inputItem' + idxInList))\r\n        currTask.checklists[idxInList].list.push({ desc: data[input], isChecked: false })\r\n        updateBoard(currTask)\r\n    }\r\n\r\n    const changeCheckBox = (item) => {\r\n        item.isChecked = !item.isChecked\r\n        updateBoard(currTask)\r\n    }\r\n\r\n    const setRange = checklist => {\r\n        const itemsChecked = checklist.list.reduce((acc, itemInList) => {\r\n            return itemInList.isChecked + acc\r\n        }, 0)\r\n        const rengeToShow = +((itemsChecked / checklist.list.length * 100).toFixed(2))\r\n        checklist.range = rengeToShow\r\n        updateBoard(currTask)\r\n    }\r\n    // useEffect(() => {\r\n    //     console.log('currTask',currTask);\r\n    // })\r\n    const updateBoard = task => {\r\n        const updatedBoard = boardService.updateCard(task, currCard, currBoard)\r\n        dispatch(saveBoard(updatedBoard))\r\n        dispatch(setCurrBoard(currBoard._id))\r\n    }\r\n\r\n    return (\r\n        <div className=\"task-modal\">\r\n            {/* <form className=\"task-modal-form\" onChange={handleSubmit(onSubmit)}> */}\r\n            <div className=\"task-modal-form\">\r\n                <div className=\"task-header\">\r\n                    <div className=\"task-title\">\r\n                        <h3>{currTask.title}</h3>\r\n                        <p>In list: {currCard.title} </p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"task-description-modal\">\r\n                    {!currTask.dueDate ? null : <section>\r\n                        <Moment className=\"due-date-moment\" fromNow>{currTask.dueDate}</Moment>\r\n                        <Moment format=\"MMM D YYYY\" withTitle>{currTask.dueDate}</Moment>\r\n                    </section>}\r\n                    {!currTask.labels.length ? null : <section><h4>Lables</h4>\r\n                        {currTask.labels.map((label, idx) =>\r\n                            <div className=\"label-in-modal\" key={idx} style={{ backgroundColor: label.color }}>\r\n                                <p>{label.desc}</p>\r\n                            </div>)}\r\n                        <button onClick={() => setLabelModal(true)}>+ </button>\r\n                    </section>}\r\n                    {!currTask.members.length ? null : <section><h4>Members</h4>\r\n                        <div className=\"member-list\">\r\n                            {currTask.members.map((member, idx) =>\r\n                                <div className=\"member-in-modal\" key={idx}>\r\n                                    <Avatar key={idx} name={member.name} size=\"30\" round={true} />\r\n                                </div>)}\r\n                            <button onClick={() => setMemberModal(true)}>+</button>\r\n                        </div>\r\n                    </section>}\r\n\r\n                    <div className=\"desc-svg\"><FontAwesomeIcon icon={faAlignLeft} />\r\n                        <p>Description:</p>\r\n                    </div>\r\n                    <textarea id=\"desc\" name=\"desc\" onClick={() => setIsDesc(!isDesc)} defaultValue={descValue} placeholder=\"Add some detailed description...\" {...register(\"desc\")} defaultValue={taskModalOp.currTask.desc} />\r\n                    {isDesc && <div className=\"saveDesc\"><button onClick={(ev) => { ev.preventDefault(); setIsDesc(!isDesc) }} >Save</button> <button onClick={() => setIsDesc(false)}>x</button> </div>}\r\n                </div>\r\n                {!currTask.checklists.length ? null : <section >\r\n                    {currTask.checklists.map((checklist, listIdx) =>\r\n                        <div className=\"checklist-in-modal\" key={listIdx}>\r\n                            <div className=\"checklist-svg\"> <div className=\"flex\"> <FontAwesomeIcon icon={faList} ></FontAwesomeIcon> <p>{checklist.title}</p></div>\r\n                                <button onClick={() => taskModalOp.addChecklist(listIdx)}>delete list</button>\r\n                            </div>\r\n                            {!checklist.list.length ? null : <div className=\"demo-range-container\">\r\n                                <div className=\"demo-range-checked\" style={{ width: checklist.range + '%' }}></div>\r\n                            </div>}\r\n                            {!checklist.list.length ? null : <span>{checklist.range}%</span>}\r\n                            {!checklist.list.length ? null : checklist.list.map((item, idx) => {\r\n                                return <div className=\"checklist-items\" key={idx}>\r\n                                    <input type=\"checkbox\" id={'checklist-item-' + idx} checked={item.isChecked} onChange={() => {\r\n                                        changeCheckBox(item)\r\n                                        setRange(checklist)\r\n                                    }} />\r\n                                    {item.isChecked ? <label style={{ textDecoration: 'line-through' }}>{item.desc}</label> : <label>{item.desc}</label>}\r\n                                </div>\r\n                            })}\r\n                            <form onSubmit={handleSubmit(res => onSubmitItemInList(res, listIdx))}>\r\n                                <input type=\"text\" autoComplete=\"off\" id={'input-item-' + listIdx} name=\"item\" placeholder=\"add an item\"  {...register('inputItem' + listIdx)} />\r\n                                <button >Add An Item</button>\r\n\r\n                            </form>\r\n                        </div>)}\r\n                </section>}\r\n                <div className=\"task-comment\">\r\n                    <p>Post a Comment:</p>\r\n                    <input type=\"text\" autoComplete=\"off\" id=\"comment\" name=\"comment\" placeholder=\"Write a comment...\"  {...register(\"activity\")} defaultValue={currTask.activity} />\r\n                </div>\r\n                {/* </form> */}\r\n            </div>\r\n            <div className=\"add-to-task\">\r\n                <div className=\"right-task-modal\">\r\n                    <h3>Add To Task:</h3>\r\n                    <p onClick={() => taskModalOp.setCurrTask(null)} className=\"btn-close-icon\"><FontAwesomeIcon className=\"fa\" icon={faTimes} /></p>\r\n                </div>\r\n                <div className=\"right-task-modal-btns\">\r\n                    <div onClick={() => setLabelModal(true)} className=\"right-task-btn\">\r\n                        <FontAwesomeIcon icon={faTag}></FontAwesomeIcon>\r\n                        <p> Labels </p>\r\n                    </div>\r\n                    <div onClick={() => setMemberModal(true)} className=\"right-task-btn\">\r\n                        <FontAwesomeIcon icon={faUser}></FontAwesomeIcon>\r\n                        <p> Members </p>\r\n                    </div>\r\n                    <div onClick={() => setChecklistModal(true)} className=\"right-task-btn\">\r\n                        <FontAwesomeIcon icon={faList}></FontAwesomeIcon>\r\n                        <p> Checklist </p>\r\n                    </div>\r\n                    <div onClick={() => setDueDateModal(true)} className=\"right-task-btn\">\r\n                        <FontAwesomeIcon icon={faClock}></FontAwesomeIcon>\r\n                        <p> Due Date </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {(!labelModal) ? null : <LabelModal setLabelModal={setLabelModal} labelModal={labelModal} currTask={currTask} addLabel={taskModalOp.addLabel}  ></LabelModal>}\r\n            {(!memberModal) ? null : <MemberModal setMemberModal={setMemberModal} memberModal={memberModal} currTask={currTask} addMemberToTask={taskModalOp.addMember} ></MemberModal>}\r\n            {(!checklistModal) ? null : <CheckListModal setChecklistModal={setChecklistModal} checklistModal={checklistModal} currTask={currTask} addChecklist={taskModalOp.addChecklist} ></CheckListModal>}\r\n            {(!dueDateModal) ? null : <DueDateModal setDueDateModal={setDueDateModal} dueDateModal={dueDateModal} addDueDate={taskModalOp.addDueDate} currTask={currTask}></DueDateModal>}\r\n        </div>\r\n    )\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/homepage.e1823959.png\";","import { useEffect, useState } from 'react'\r\nimport Avatar from 'react-avatar'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport boardService from '../../services/boardService'\r\nimport { saveBoard, setCurrBoard } from '../../store/actions/boardActions'\r\nimport Moment from 'react-moment';\r\nimport './BoardMenu.scss'\r\nimport { faChevronLeft, faPalette, faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { utilService } from '../../services/utilService'\r\nimport imgLoader from '../../assets/imgs/homepage.png'\r\n\r\nexport function BoardMenu({ boardMenuOp }) {\r\n    const dispatch = useDispatch()\r\n    const { register, handleSubmit } = useForm();\r\n    const currBoard = useSelector(state => state.boardReducer.currBoard)\r\n    const [isAbout, setIsAbout] = useState(false)\r\n    const [isBackground, setIsBackground] = useState(false)\r\n    const [isFilter, setIsFilter] = useState(false)\r\n    const [isLabels, setIsLabels] = useState(false)\r\n    const [cloudImgs, setCloudImgs] = useState(null)\r\n    const [isAddLabel, setIsAddLabel] = useState(false)\r\n    const [filterBy, setFilterBy] = useState({ task: '', labels: [] })\r\n    const colors = ['lightgreen', 'lightyellow', 'lightblue', 'orange', 'slateblue', 'lightpink', 'lightgray', 'white']\r\n\r\n    useEffect(() => {\r\n        setCloudImgs(boardService.getCloudImages())\r\n        sendFilter()\r\n    }, [filterBy])\r\n\r\n    const onSearchTask = data => {\r\n        setFilterBy({ ...filterBy, task: data.searchTask })\r\n    }\r\n\r\n    const onSearchLabel = idx => {\r\n        if (filterBy.labels.includes(boardMenuOp.labels[idx].desc)) {\r\n            const removeIdx = filterBy.labels.findIndex(label => label === boardMenuOp.labels[idx].desc)\r\n            filterBy.labels.splice(removeIdx, 1)\r\n            setFilterBy({ ...filterBy, labels: filterBy.labels })\r\n        }\r\n        else setFilterBy({ ...filterBy, labels: [...filterBy.labels, boardMenuOp.labels[idx].desc] })\r\n    }\r\n\r\n    const sendFilter = () => {\r\n        boardMenuOp.filterTasks(filterBy)\r\n    }\r\n\r\n    const saveLabels = data => {\r\n        const descs = []\r\n        const colors = []\r\n        Object.keys(data).forEach(input => {\r\n            if (input.includes('editBoardLabelColor')) colors.push(input)\r\n            else if (input.includes('editBoardLabel')) descs.push(input)\r\n        })\r\n        const arrValues = Object.values(data)\r\n        arrValues.splice(0, 1)\r\n        const arr1 = []\r\n        const arr2 = []\r\n        arrValues.forEach((val, idx) => {\r\n            if (idx % 2 === 0) arr1.push(val)\r\n            else arr2.push(val)\r\n        })\r\n        const labels = arr1.map((val, idx) => {\r\n            return { desc: arr1[idx], color: arr2[idx] }\r\n        })\r\n        dispatch(saveBoard({ ...currBoard, labels: labels }))\r\n        setTimeout(() => dispatch(setCurrBoard(currBoard._id)), 100)\r\n    }\r\n\r\n    const onAddBoardLabel = (data) => {\r\n        const label = { desc: data.addBoardLabel, color: data.addBoardLabelColor }\r\n        currBoard.labels.push(label)\r\n        dispatch(saveBoard(currBoard))\r\n        setIsAddLabel(!isAddLabel)\r\n        boardMenuOp.addActivity('Aviv Zohar', 'added', 'label')\r\n    }\r\n\r\n    const deleteLabel = (idx) => {\r\n        currBoard.labels.splice(idx, 1)\r\n        dispatch(saveBoard(currBoard))\r\n        setTimeout(() => dispatch(setCurrBoard(currBoard._id)), 100)\r\n        boardMenuOp.addActivity('Aviv Zohar', 'deleted', 'label')\r\n    }\r\n\r\n    const closeMenu = () => {\r\n        boardMenuOp.setIsMenu(false)\r\n        setIsAbout(false)\r\n        setIsBackground(false)\r\n        setIsFilter(false)\r\n        setIsLabels(false)\r\n        onSearchTask('')\r\n    }\r\n\r\n    if (!cloudImgs || !currBoard) return (<div className=\"loader-container\">Loading</div>)\r\n\r\n    return (\r\n        <section className=\"board-menu flex\" style={boardMenuOp.isMenu ? { maxWidth: 100 + '%' } : { maxWidth: 0 }}>\r\n            <article className=\"menu-main\">\r\n                <div className=\"flex\">\r\n                    <h3>Menu</h3>\r\n                    <p onClick={closeMenu}><FontAwesomeIcon className=\"fa\" icon={faTimes} /></p>\r\n                </div>\r\n                <div className=\"flex\">\r\n                    <p onClick={() => setIsAbout(!isAbout)}>About this board</p>\r\n                    <p onClick={() => setIsBackground(!isBackground)}>Background</p>\r\n                    <p onClick={() => setIsFilter(!isFilter)}>Search cards</p>\r\n                    <p onClick={() => setIsLabels(!isLabels)}>Labels</p>\r\n                </div>\r\n                <div className=\"hide-overflow flex\">\r\n                    <h3>Activity</h3>\r\n                    <ul>\r\n                        {currBoard.activity.length && currBoard.activity.map(activity => <li key={activity._id}>\r\n                            {activity.type !== 'Attached' ? <p><span>{activity.member}</span> {activity.type} {activity.desc} {activity.type === 'deleted' ? 'from' : 'to'} <span>{activity.card}</span>{activity.card === 'board' ? '' : ' card'}.</p>\r\n                                : <p><span>{activity.member}</span> {activity.type} {activity.desc} {activity.type === 'deleted' ? 'from' : 'to'} <span>{activity.card}</span> task.</p>}\r\n                            <small><Moment fromNow>{activity.createdAt}</Moment></small>\r\n                        </li>)}\r\n                        {!currBoard.activity.length && <li><h1>No activity here...</h1></li>}\r\n                    </ul>\r\n                </div>\r\n            </article>\r\n            <article className=\"menu-about sub-menu\" style={isAbout ? { maxWidth: 100 + '%' } : { maxWidth: 0 }}>\r\n                <div className=\"flex\">\r\n                    <p onClick={() => setIsAbout(!isAbout)}><FontAwesomeIcon className=\"fa\" icon={faChevronLeft} /></p>\r\n                    <h3>About this board</h3>\r\n                    <p onClick={closeMenu}><FontAwesomeIcon className=\"fa\" icon={faTimes} /></p>\r\n                </div>\r\n                <div className=\"flex\">\r\n                    <h3>Members</h3>\r\n                    <div>{boardMenuOp.members.map((member, idx) => <Avatar key={idx} name={member.name} size=\"30\" round={true} />)}</div>\r\n                </div>\r\n                <div className=\"flex\">\r\n                    <h3>Description</h3>\r\n                    <textarea placeholder=\"Type here a description\" />\r\n                </div>\r\n                <div className=\"flex\">\r\n                    <h3>Statistics</h3>\r\n                </div>\r\n            </article>\r\n            <article className=\"menu-background sub-menu\" style={isBackground ? { maxWidth: 100 + '%' } : { maxWidth: 0 }}>\r\n                <div className=\"flex\">\r\n                    <p onClick={() => setIsBackground(!isBackground)}><FontAwesomeIcon className=\"fa\" icon={faChevronLeft} /></p>\r\n                    <h3>Change background</h3>\r\n                    <p onClick={closeMenu}><FontAwesomeIcon className=\"fa\" icon={faTimes} /></p>\r\n                </div>\r\n                <div className=\"hide-overflow flex\">\r\n                    <div className=\"flex\">\r\n                        <h4>Colors</h4>\r\n                        <div className=\"flex\">\r\n                            {colors.map((color, idx) => <aside key={idx} style={{ backgroundColor: color }} onClick={() => boardMenuOp.changeBackground(color, true)}></aside>)}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex\">\r\n                        <h4>Photos</h4>\r\n                        <div className=\"flex\">\r\n                            {cloudImgs.map((url, idx) => <img key={idx} onClick={() => boardMenuOp.changeBackground(url)} decoding=\"async\" loading=\"lazy\" src={url} alt={url} />)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </article>\r\n            <article className=\"menu-filter sub-menu\" style={isFilter ? { maxWidth: 100 + '%' } : { maxWidth: 0 }}>\r\n                <div className=\"flex\">\r\n                    <p onClick={() => setIsFilter(!isFilter)}><FontAwesomeIcon className=\"fa\" icon={faChevronLeft} /></p>\r\n                    <h3>Search cards</h3>\r\n                    <p onClick={closeMenu}><FontAwesomeIcon className=\"fa\" icon={faTimes} /></p>\r\n                </div>\r\n                <div>\r\n                    <form onChange={handleSubmit(onSearchTask)}>\r\n                        <input type=\"text\" placeholder=\"Search for task...\" {...register(\"searchTask\")} />\r\n                    </form>\r\n                </div>\r\n                <div>\r\n                    <h4>Search by label</h4>\r\n                    <ul>\r\n                        {boardMenuOp.labels.map((label, idx) => <li key={idx} style={{ backgroundColor: filterBy.labels.includes(label.desc) ? 'gray' : 'inherit' }} onClick={() => onSearchLabel(idx)}>\r\n                            <div style={{ backgroundColor: label.color }}></div>\r\n                            <p>{label.desc}</p>\r\n                        </li>)}\r\n                    </ul>\r\n                </div>\r\n            </article>\r\n            <article className=\"menu-labels sub-menu\" style={isLabels ? { maxWidth: 100 + '%' } : { maxWidth: 0 }}>\r\n                <div className=\"flex\">\r\n                    <p onClick={() => setIsLabels(!isLabels)}><FontAwesomeIcon className=\"fa\" icon={faChevronLeft} /></p>\r\n                    <h3>Labels</h3>\r\n                    <p onClick={closeMenu}><FontAwesomeIcon className=\"fa\" icon={faTimes} /></p>\r\n                </div>\r\n                <div className=\"hide-overflow\">\r\n                    <ul>\r\n                        {boardMenuOp.labels.map((label, idx) => <li key={idx} style={{ backgroundColor: label.color }}>\r\n                            <form onChange={handleSubmit(utilService.debounce(saveLabels, 800))}>\r\n                                <input type=\"text\" defaultValue={label.desc} placeholder=\"Label name\" required {...register(\"editBoardLabel\" + idx)} />\r\n                                <label name=\"label-color\"><FontAwesomeIcon className=\"fa\" icon={faPalette} />\r\n                                    <input type=\"color\" {...register(\"editBoardLabelColor\" + idx)} defaultValue={label.color} /></label>\r\n                            </form>\r\n                            <p><FontAwesomeIcon className=\"fa\" icon={faTimes} onClick={() => deleteLabel(idx)} /></p>\r\n                        </li>)}\r\n                        {!isAddLabel && <li onClick={() => setIsAddLabel(!isAddLabel)}><p>New label</p></li>}\r\n                        {isAddLabel && <li>\r\n                            <form onSubmit={handleSubmit(onAddBoardLabel)}>\r\n                                <input type=\"text\" placeholder=\"Label name\" autoComplete=\"off\" required {...register(\"addBoardLabel\")} />\r\n                                <input type=\"color\" name=\"label-color\" id=\"label-color\" defaultValue=\"#FFFFFF\" {...register(\"addBoardLabelColor\")} />\r\n                                <button>Add label</button>\r\n                            </form>\r\n                            <button onClick={() => setIsAddLabel(!isAddLabel)}>X</button></li>}\r\n                    </ul>\r\n                </div>\r\n            </article>\r\n        </section >\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/taskman-loader.d5d52ecc.svg\";","import { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { loadBoards, saveBoard, setCurrBoard, updateBackground } from '../../store/actions/boardActions'\r\nimport { CardPreview } from '../../cmps/CardPreview'\r\nimport './BoardDetails.scss'\r\nimport { TaskModal } from '../../cmps/TaskModal/TaskModal'\r\nimport { useForm } from \"react-hook-form\";\r\nimport boardService from '../../services/boardService'\r\nimport Avatar from 'react-avatar';\r\nimport { BoardMenu } from '../../cmps/BoardMenu'\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBars, faCheckCircle, faPlus } from '@fortawesome/free-solid-svg-icons'\r\nimport { utilService } from '../../services/utilService'\r\nimport loader from '../../assets/imgs/taskman-loader.svg'\r\n\r\nexport function BoardDetails(props) {\r\n    const dispatch = useDispatch()\r\n    const { register, handleSubmit } = useForm()\r\n    var newCard = boardService.getEmptyCard()\r\n    const [users, setUsers] = useState(boardService.getUsers())\r\n    const currBoard = useSelector(state => state.boardReducer.currBoard)\r\n    const [currCard, setCurrCard] = useState(null)\r\n    const [currTask, setCurrTask] = useState(null)\r\n    const [isAddCard, setIsAddCard] = useState(null)\r\n    const [isMenu, setIsMenu] = useState(false)\r\n    const [draggedCards, setDraggedCards] = useState(null)\r\n    const [isInvite, setIsInvite] = useState(null)\r\n    const [isCardModal, setIsCardModal] = useState(null)\r\n    const [x, setX] = useState(null)\r\n    const [cardModal, setCardModal] = useState(null)\r\n    const [addMembersToBoard, setMembersToBoard] = useState(null)\r\n    const [isDescShown, setIsDescShown] = useState(false)\r\n\r\n    useEffect(() => {\r\n        dispatch(updateBackground(false))\r\n        const { id } = props.match.params\r\n        if (!currBoard) dispatch(setCurrBoard(id))\r\n        else if (!draggedCards) setDraggedCards(currBoard.cards)\r\n        dispatch(loadBoards())\r\n        console.log('render!');\r\n    }, [currBoard])\r\n\r\n    //Card Drag\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n        const items = draggedCards;\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n        setDraggedCards(items);\r\n    }\r\n\r\n    // Card modal\r\n    const openCardModal = (ev, card) => {\r\n        setX(ev.clientX)\r\n        setIsCardModal(true)\r\n        setCardModal(card)\r\n    }\r\n\r\n    const closeModal = () => {\r\n        setCardModal(null)\r\n        setIsCardModal(false)\r\n    }\r\n\r\n    // forms\r\n    const setBoardTitle = data => {\r\n        dispatch(saveBoard({ ...currBoard, title: data.boardTitle }))\r\n    }\r\n\r\n    const addMemberToBoard = data => {\r\n        var userToAdd = users.filter(user => user.name.toLowerCase().includes(data.member.toLowerCase()))\r\n        if (data.member === '') userToAdd = null\r\n        setMembersToBoard(userToAdd)\r\n    }\r\n\r\n    const addLabel = (label) => {\r\n        if (!currTask.labels.length) currTask.labels.push(label)\r\n        else {\r\n            if (currTask.labels.some((currLabel) => currLabel.color === label.color)) {\r\n                //member is already in the Task\r\n                const labelToRemove = currTask.labels.findIndex(currLabel => currLabel.color === label.color)\r\n                currTask.labels.splice(labelToRemove, 1)\r\n            } else {\r\n                currTask.labels.push(label)\r\n            }\r\n        }\r\n        const newBoard = boardService.updateCard(currTask, currCard, currBoard)\r\n        dispatch(saveBoard(newBoard))\r\n        dispatch(setCurrBoard(newBoard._id))\r\n        addActivity('Aviv Zohar', 'added', 'labal')\r\n    }\r\n\r\n    const addChecklist = (list) => {\r\n        if (typeof list === 'object') currTask.checklists.push(list)\r\n        else {//variable \"list\" is an index of the checklist we want to remove from the array\r\n            currTask.checklists.splice(list, 1);\r\n        }\r\n        const newBoard = boardService.updateCard(currTask, currCard, currBoard)\r\n        dispatch(saveBoard(newBoard))\r\n        dispatch(setCurrBoard(newBoard._id))\r\n    }\r\n\r\n    const addDueDate = (date) => {\r\n        currTask.dueDate = date\r\n        const newBoard = boardService.updateCard(currTask, currCard, currBoard)\r\n        dispatch(saveBoard(newBoard))\r\n        dispatch(setCurrBoard(newBoard._id))\r\n    }\r\n\r\n    const addMember = (member) => {\r\n        if (!currTask.members.length) currTask.members.push(member)\r\n        else {\r\n            if (currTask.members.some((currMember) => currMember._id === member._id)) {\r\n                // member is already in the Task\r\n                const memberToRemove = currTask.members.findIndex(currMember => currMember._id === member._id)\r\n                currTask.members.splice(memberToRemove, 1)\r\n            } else {\r\n                currTask.members.push(member)\r\n            }\r\n        }\r\n        const newBoard = boardService.updateCard(currTask, currCard, currBoard)\r\n        dispatch(saveBoard(newBoard))\r\n        dispatch(setCurrBoard(newBoard._id))\r\n        addActivity('Aviv Zohar', 'Attached', member.name, currTask.title)\r\n    }\r\n\r\n    const addNewCard = (data) => {\r\n        newCard.title = data.newCardTitle\r\n        currBoard.cards.push(newCard)\r\n        setDraggedCards(currBoard.cards)\r\n        dispatch(saveBoard({ ...currBoard, cards: [...currBoard.cards, newCard] }))\r\n        setTimeout(() => dispatch(setCurrBoard(currBoard._id)), 150)\r\n        newCard = boardService.getEmptyCard()\r\n        setIsAddCard(!isAddCard)\r\n        data.newCardTitle = ''\r\n        addActivity('Aviv Zohar', 'added', 'card')\r\n    }\r\n\r\n    const deleteCard = () => {\r\n        const cardIdx = currBoard.cards.findIndex(card => card._id === currCard._id)\r\n        const boardToSave = boardService.updateBoard(cardIdx, currBoard)\r\n        dispatch(saveBoard(boardToSave))\r\n        dispatch(setCurrBoard(boardToSave._id))\r\n        addActivity('Aviv Zohar', 'deleted', 'card')\r\n        closeModal()\r\n    }\r\n\r\n    const changeBackground = (background, type) => {\r\n        if (type) {\r\n            addActivity('Aviv Zohar', 'change', 'color')\r\n            dispatch(saveBoard({ ...currBoard, background: { color: background, img: null } }))\r\n        }\r\n        else {\r\n            addActivity('Aviv Zohar', 'change', 'image')\r\n            dispatch(saveBoard({ ...currBoard, background: { color: null, img: background } }))\r\n        }\r\n        setTimeout(() => dispatch(setCurrBoard(currBoard._id)), 100)\r\n    }\r\n\r\n    const removeUserFromBoard = (user) => {\r\n        if (user.boards.includes(currBoard._id)) {\r\n            const boardIdx = user.boards.findIndex(board => board._id === currBoard._id)\r\n            user.boards.splice(boardIdx, 1)\r\n        } else {\r\n            user.boards.push(currBoard._id)\r\n        }\r\n    }\r\n\r\n    const filterTasks = (filterBy) => {\r\n        if (filterBy.task || filterBy.labels.length) {\r\n            var cards = currBoard.cards\r\n            if (filterBy.task) {\r\n                cards = currBoard.cards.find(card => {\r\n                    return card.tasks.find(task => {\r\n                        return task.title.includes(filterBy.task)\r\n                    })\r\n                })\r\n            }\r\n            if (filterBy.labels.length) {\r\n                cards = currBoard.cards.find(card => {\r\n                    return card.tasks.find(task => {\r\n                        return task.labels.find(label => label.desc.includes(filterBy.labels))\r\n                    })\r\n                })\r\n            }\r\n            if (!cards || !Object.keys(cards).length) {\r\n                const failCard = boardService.getEmptyCard()\r\n                failCard.title = 'There are no matched tasks.'\r\n                setDraggedCards([failCard])\r\n            } else setDraggedCards([cards])\r\n        } else setDraggedCards(currBoard.cards)\r\n    }\r\n\r\n    const addActivity = (member, type, desc, card = 'board') => {\r\n        const newActivity = { _id: utilService.makeId(), member, type, desc, card, createdAt: Date.now() }\r\n        currBoard.activity.unshift(newActivity)\r\n        dispatch(saveBoard(currBoard))\r\n        dispatch(setCurrBoard(currBoard._id))\r\n    }\r\n\r\n    if (!currBoard || !draggedCards || !draggedCards.length) return (<div className=\"loader-container\"><img src={loader} alt=\"\" /></div>)\r\n\r\n    const cardPreviewOp = {\r\n        openCardModal,\r\n        closeModal,\r\n        addActivity,\r\n        setCurrCard,\r\n        setCurrTask\r\n    }\r\n\r\n    const boardMenuOp = {\r\n        setIsMenu,\r\n        isMenu,\r\n        changeBackground,\r\n        members: currBoard.members,\r\n        filterTasks,\r\n        labels: currBoard.labels,\r\n        addActivity\r\n    }\r\n\r\n    const taskModalOp = {\r\n        setCurrTask,\r\n        currTask,\r\n        addLabel,\r\n        addMember,\r\n        addChecklist,\r\n        addDueDate\r\n    }\r\n\r\n    return (\r\n        <div className=\"board-details sub-container\">\r\n            <div className=\"board-header flex\">\r\n                <div className=\"flex\">\r\n                    <form onChange={handleSubmit(setBoardTitle)}>\r\n                        <input type=\"text\" id=\"title\" name=\"title\" {...register(\"boardTitle\")} defaultValue={currBoard.title} />\r\n                    </form>\r\n                    <div className=\"flex\">\r\n                        <div className=\"avatars\">\r\n                            {currBoard.members.map((member, idx) => <Avatar key={idx} name={member.name} size=\"30\" round={true} />)}\r\n                        </div>\r\n                        <button onClick={() => setIsInvite(!isInvite)}>Invite</button>\r\n                        {isInvite && <div className=\"invite-members-modal\">\r\n                            <form onChange={handleSubmit(addMemberToBoard)} >\r\n                                <div className=\"invite-title\">\r\n                                    <p>Invite to board:</p>\r\n                                    <input type=\"text\" autoComplete=\"off\" placeholder=\"Search Taskman Members..\" id=\"member\" name=\"member\"  {...register(\"member\")} />\r\n                                </div>\r\n                            </form>\r\n                            {addMembersToBoard && <div className=\"exist-members\">\r\n                                <ul>\r\n                                    {addMembersToBoard.map((member, idx) => {\r\n                                        if (!member.boards.includes(currBoard._id)) return (\r\n                                            <li key={member._id}>\r\n                                                <p>Add members:</p>\r\n                                                <button className=\"suggested-user\">\r\n                                                    <Avatar key={idx} name={member.name} size=\"30\" round={true} />\r\n                                                    <p>{member.name}</p>\r\n                                                    <p><FontAwesomeIcon icon={faPlus}></FontAwesomeIcon></p>\r\n                                                </button>\r\n                                            </li>\r\n                                        )\r\n                                    })}\r\n                                </ul>\r\n                            </div>}\r\n                            <div className=\"exist-members\">\r\n                                <p>Suggested Users:</p>\r\n                                {users.map((user, idx) => {\r\n                                    if (!user.boards.includes(currBoard._id)) return (\r\n                                        <button key={user._id} onClick={() => removeUserFromBoard(user)} className=\"suggested-user\">\r\n                                            <Avatar key={idx} name={user.name} size=\"30\" round={true} />\r\n                                            <p>{user.name}</p>\r\n                                            <p><FontAwesomeIcon icon={faPlus}></FontAwesomeIcon></p>\r\n                                        </button>\r\n\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                            <div className=\"exist-members\">\r\n                                <p>In This Board:</p>\r\n                                {users.map((user, idx) => {\r\n                                    if (user.boards.includes(currBoard._id)) return (\r\n                                        <button key={user._id} onClick={() => removeUserFromBoard(user)} className=\"suggested-user\">\r\n                                            <Avatar key={idx} name={user.name} size=\"30\" round={true} />\r\n                                            <p>{user.name}</p>\r\n                                            <p><FontAwesomeIcon icon={faCheckCircle} /></p>\r\n                                        </button>)\r\n                                })}\r\n                            </div>\r\n                        </div>}\r\n                    </div>\r\n                </div>\r\n                <div className=\"flex\">\r\n                    <p className=\"open-menu-btn\" onClick={() => setIsMenu(true)}><FontAwesomeIcon className=\"fa\" icon={faBars}></FontAwesomeIcon></p>\r\n                    <BoardMenu boardMenuOp={boardMenuOp}></BoardMenu>\r\n                </div>\r\n            </div>\r\n            <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                <Droppable droppableId=\"characters\" type=\"TASK\">\r\n                    {(provided) => (\r\n                        <div {...provided.droppableProps} ref={provided.innerRef} className=\"cards-container flex\">\r\n                            <div className=\"flex\">\r\n                                {draggedCards.map((card, idx) =>\r\n                                    <Draggable key={card._id} draggableId={card._id} index={idx}>\r\n                                        {provided => (<div {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}>\r\n                                            <CardPreview key={card._id} cardPreviewOp={cardPreviewOp} isDescShown={isDescShown} setIsDescShown={setIsDescShown} card={card}></CardPreview>\r\n                                        </div>)}\r\n                                    </Draggable>)}\r\n                                {provided.placeholder}\r\n                                {!isAddCard && <button className=\"add-card-btn\" onClick={() => setIsAddCard(!isAddCard)}> + Add Card.</button>}\r\n                                {isAddCard && <form className=\"add-card-container\" onSubmit={handleSubmit(addNewCard)}>\r\n                                    <input type=\"text\" id=\"title\" name=\"title\" {...register(\"newCardTitle\")} />\r\n                                    <button>Add Card</button>\r\n                                </form>}\r\n                            </div>\r\n                        </div>)}\r\n                </Droppable>\r\n            </DragDropContext>\r\n            {isCardModal && <div style={{ left: `${x}px`, top: `155px` }} className=\"card-modal\">\r\n                <div className=\"card-title-modal\">\r\n                    <p>{cardModal.title}</p>\r\n                    <button onClick={() => closeModal()}>x</button>\r\n                </div>\r\n                <div className=\"card-modal-btns\">\r\n                    <button onClick={deleteCard}>Delete This Card</button>\r\n                </div>\r\n            </div>}\r\n            {currTask && <TaskModal taskModalOp={taskModalOp}></TaskModal>}\r\n        </div>\r\n    )\r\n}","import { Link } from 'react-router-dom'\r\nimport './BoardPreview.scss'\r\n\r\nexport function BoardPreview({ board }) {\r\n    console.log('board:', board)\r\n\r\n    return (\r\n        <div className=\"board-link links\" style={board.background.img ? { backgroundImage: `url(${board.background.img})` } : { backgroundColor: board.background.color }}>\r\n            <Link className=\"link\" to={`/board/${board._id}`}>\r\n                <h4>{board.title}</h4>\r\n            </Link>\r\n        </div>\r\n    )\r\n}","import { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { BoardPreview } from '../BoardPreview'\r\nimport './BoardList.scss'\r\n\r\nexport function BoardList({ boardListOp }) {\r\n    const { register, handleSubmit } = useForm();\r\n    const [isCreateBoard, setIsCreateBoard] = useState(null)\r\n\r\n    const onAddBoard = data => {\r\n        boardListOp.addBoard(data.newBoardTitle)\r\n        setIsCreateBoard(!isCreateBoard)\r\n    }\r\n\r\n    return (\r\n        <ul className=\"board-container\">\r\n            {boardListOp.boards.map(board => <li key={board._id}><BoardPreview board={board}></BoardPreview></li>)}\r\n            <li className=\"board-link add-board\">\r\n                {!isCreateBoard && <button onClick={() => setIsCreateBoard(!isCreateBoard)}>Create board</button>}\r\n                {isCreateBoard &&\r\n                    <form onSubmit={handleSubmit(onAddBoard)}>\r\n                        <input type=\"text\" id=\"title\" name=\"title\" {...register(\"newBoardTitle\")} placeholder=\"Board name\" />\r\n                        <h4>Create board</h4>\r\n                    </form>}\r\n            </li>\r\n        </ul>\r\n    )\r\n}","import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { loadBoards, saveBoard } from '../../store/actions/boardActions.js'\r\nimport { BoardList } from '../../cmps/BoardList'\r\nimport './TaskmanApp.scss'\r\nimport boardService from '../../services/boardService.js'\r\nimport loader from '../../assets/imgs/taskman-loader.svg'\r\n\r\nexport function TaskmanApp() {\r\n    const dispatch = useDispatch()\r\n    const boards = useSelector(state => state.boardReducer.boards)\r\n    const newBoard = boardService.getEmptyBoard()\r\n\r\n    useEffect(() => {\r\n        dispatch(loadBoards())\r\n    }, [])\r\n\r\n    const addBoard = (title) => {\r\n        newBoard.title = title\r\n        dispatch(saveBoard(newBoard))\r\n        dispatch(loadBoards())\r\n    }\r\n\r\n    if (!boards || !boards.length) return (<div className=\"loader-container\"><img src={loader} alt=\"\" /></div>)\r\n\r\n    const boardListOp = {\r\n        boards,\r\n        addBoard\r\n    }\r\n\r\n    return (\r\n        <div className=\"sub-container\">\r\n            <h2>Your Workspace boards</h2>\r\n            <BoardList boardListOp={boardListOp}></BoardList>\r\n        </div >\r\n    )\r\n}\r\n","import { useSelector } from 'react-redux';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport './App.scss';\r\nimport { AppHeader } from './cmps/AppHeader';\r\nimport { BoardDetails } from './pages/BoardDetails';\r\nimport { TaskmanApp } from './pages/TaskmanApp';\r\n\r\nfunction App() {\r\n  const background = useSelector(state => state.boardReducer.background)\r\n  const currBoard = useSelector(state => state.boardReducer.currBoard)\r\n  return (\r\n    <Router>\r\n      <div className=\"App container\" style={!background ? currBoard ? currBoard.background.color ? { backgroundColor: currBoard.background.color } : { backgroundImage: currBoard.background.img ? `url(${currBoard.background.img})` : '' } : { backgroundColor: 'white' } : { backgroundColor: 'white' }}>\r\n        <AppHeader />\r\n        <Switch>\r\n          <Route component={BoardDetails} path='/board/:id?' />\r\n          <Route component={TaskmanApp} path='/' />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const INITIAL_STATE = {\r\n  boards: [],\r\n  currBoard: null,\r\n  background: false,\r\n  filterBy: null,\r\n}\r\n\r\nexport function boardReducer(state = INITIAL_STATE, action) {\r\n  switch (action.type) {\r\n    case 'SET_BOARDS':\r\n      return {\r\n        ...state,\r\n        boards: action.boards\r\n      }\r\n    case 'SET_BOARD':\r\n      return {\r\n        ...state,\r\n        currBoard: action.board\r\n      }\r\n    case 'ADD_BOARD':\r\n      return {\r\n        ...state,\r\n        boards: [...state.boards, action.board]\r\n      }\r\n    case 'REMOVE_BOARD':\r\n      return {\r\n        ...state,\r\n        boards: state.boards.filter(board => board._id !== action.boardId)\r\n      }\r\n    case 'UPDATE_BOARD':\r\n      const { updatedBoard } = action\r\n      return {\r\n        ...state,\r\n        boards: state.boards.map(board => board._id === updatedBoard._id ? updatedBoard : board)\r\n      }\r\n    case 'UPDATE_BACKGROUND':\r\n      return {\r\n        ...state,\r\n        background: action.background\r\n      }\r\n    case 'UPDATE_FILTERBY':\r\n      return {\r\n        ...state,\r\n        filterBy: action.filterBy\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport { boardReducer } from './reducers/boardReducer';\r\n// import { userReducer } from './reducers/userReducer';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst rootReducer = combineReducers({\r\n  boardReducer,\r\n  // userReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();"],"sourceRoot":""}